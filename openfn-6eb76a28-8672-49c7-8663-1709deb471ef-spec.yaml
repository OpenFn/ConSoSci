name: wcs-grievances
description: null
collections: null
credentials:
  aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances:
    name: Asana API Token - AK WCS Grievances
    owner: aleksa@openfn.org
  aleksa@openfn.org-WCS-GRM-Kobo-Account:
    name: WCS GRM Kobo Account
    owner: aleksa@openfn.org
  ddetoeuf@wcs.org-Diane-GoogleSheet:
    name: Diane GoogleSheet
    owner: ddetoeuf@wcs.org
  rediet@openfn.org-Rediet-Googlesheet:
    name: Rediet Googlesheet
    owner: rediet@openfn.org
  rediet@openfn.org-WCS-GRM-Kobo---RAW-cred:
    name: WCS GRM Kobo - RAW cred
    owner: rediet@openfn.org
  rediet@openfn.org-WCS-Programs-Database-central-db:
    name: WCS Programs Database central db
    owner: rediet@openfn.org
workflows:
  0.-GIDs-and-Mappings-for-Upsert:
    name: 0. GIDs and Mappings for Upsert
    jobs:
      A-GIDs-and-Mappings-for-Upsert:
        name: A GIDs and Mappings for Upsert
        adaptor: '@openfn/language-asana@v2.0.0'
        credential: null
        body: |
          //Typically run at the very beginning, or when we add new fields in Asana.
          // Retrieve the Project gid and task gid from the Asana project URL i.e. https://app.asana.com/0/<Project_gid/task_id
          // get("/tasks/1201871867457231", {
          //     headers: {
          //       Accept: "application/json",
          //       Authorization: `Bearer ${state.configuration.token}`      
          //       },
            
          //   },
            
              //Returns a json of all fields and their associated gids. There are gids for project, task, field and field options/choices.
              //this can be viewed in the Activity History
              
              //Note: Customizing a field name in Asana does not change its gid.  
            
            
            
            
             // =========== FETCHING GIDS FROM ASANA TO CREATE SOME HELPFSUL UPSERT STATEMENTS =============  
          //FOR THIS JOB WE NEED A task_gid and NOT project_id. 
          // So you first create a sample task in your project, and retrieve its task_id and then insert it in 'getTask' below
          // Retrieve the task_gid from the Asana project URL i.e. https://app.asana.com/0/<Project_gid/task_id

          // Make sure that this task is alive in asana!
            getTask("1209399303211159",   //Again, this is a task_gid, and NOT a project_id
            {},
            state => {
              return state;
            },
           );
           
           // =========== MAPPLE TABLES & STATEMENTS FOR UPSERT JOB =============
           
          // *********** 1. MAPPING TABLES **************
          //This fn below creates a mapping table / code snippet for Asana custom fields choices (enum_option)
          //This should be at the very top of the script, before the upsert function.
          fn(state => {
            const { data } = state.data;
            const formatMapping = {};
            
            console.log("*********DATA***********");
            console.log(data);
            
            data.custom_fields.forEach(field => {
              if (field.enum_options){
                field.enum_options.forEach(option => {
                  formatMapping[field.name + "_" + option.name] = option.gid;
                });
              }
            });
             
            console.log("//=======Mapping Table Statements ============");
            console.log("(Must be placed in fn block where you define const formatMapping, and return ...state, formatMapping)");
            console.log(formatMapping);
            console.log('//=====================End of Mapping Table statements=============');
            console.log('');
            return state;
          });
           //These output Statements should be placed into this fn Block:
           
          // fn(state => {   
          //   const formatMapping = {
          //   Statement 1
          //   Statement 2
          //   Statement n
          //   };
          //   return { ...state, formatMapping };
          // });
          // ********************** END OF MAPPLE TABLES ****************************************************



          // ***************** 2. STATEMENTS FOR OPEN-ENDED AND MULTICHOICE QUESTIONS *************************************
          //This tells Asana what fields to update and how to locate them.
          fn(state => {
            const { data } = state.data;
            var script = "";
            
            console.log("//========Statements to insert into custom_fieds{} =======");
            console.log("");
            
            console.log("// Fields  belonging to open-ended questions (qxns that accept free text input)");
            data.custom_fields.forEach(s => {
              if(s.name && !s.enum_options){
                // Fields  belonging to open-ended questions (qxns that accept free text input)
                script = "'"+ s.gid + "'" + ": dataValue('body." + s.name+"'),";
                console.log(script);
              }
            });


            console.log("");
            console.log("// Fields  belonging to questions with dropdown or multiple choice");
            data.custom_fields.forEach(s => {
              if(s.name && s.enum_options){
                // Fields  belonging to questions with dropdown or multiple choice
                script = `'${s.gid}': state => state.formatMapping["${s.name}_" + dataValue('body.${s.name}')(state)],`;
                console.log(script);
              }

            });


            console.log('//===========End of Statements========================');
            
            return state;
           });
           
          // ***************** END OF STATEMENTS FOR OPEN-ENDED QUESTIONS ************************************* 

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->A-GIDs-and-Mappings-for-Upsert:
        source_trigger: webhook
        target_job: A-GIDs-and-Mappings-for-Upsert
        condition_type: always
        enabled: true
  "1.-Get-FormsList-(Ongoing)":
    name: '1. Get FormsList (Ongoing)'
    jobs:
      GRM-Fetch-1-Get-FormsList-Ongoing:
        name: GRM-Fetch-1 Get FormsList Ongoing
        adaptor: '@openfn/language-googlesheets@3.0.14'
        credential: ddetoeuf@wcs.org-Diane-GoogleSheet
        body: |
          //== Job to be used for getting a list of deployed GRM Kobo forms from sheets to auto-sync  ==//
          // Link to sheet: https://docs.google.com/spreadsheets/d/1s7K3kxzm5AlpwiALattyc7D9_aIyqWmo2ubcQIUlqlY/edit?gid=1559623602#gid=1559623602
          // This can be run on-demand at any time by clicking "run" //
          getValues(
            '1s7K3kxzm5AlpwiALattyc7D9_aIyqWmo2ubcQIUlqlY',
            'grm-DEPLOYED!A:P', //get Deployed GRM forms list from Sheet
            state => {
              const [headers, ...values] = state.data.values;

              const mapHeaderToValue = value => {
                return headers.reduce((obj, header) => {
                  obj[header] = value[headers.indexOf(header)];
                  return obj;
                }, {});
              };

              state.sheetsData = values
                .filter(
                  item => item.includes('TRUE') //return forms where auto-sync = TRUE
                  //&& item.includes('bns_survey', 'nrgt_current')
                )
                .map(item => mapHeaderToValue(item));

              return state;
            }
          );

          fn(state => {
            const { sheetsData } = state;

            // OpenFn will not sync Kobo records that are older than 1 week to avoid overwriting data in Asana
            const isMoreThanAWeekOld = dateString => {
              const currentDate = new Date();
              const inputDate = new Date(dateString);
              // Calculate the difference in time (in milliseconds) and convert to days
              const daysDifference = (currentDate - inputDate) / (1000 * 60 * 60 * 24);

              return daysDifference > 7;
            };
            // IF YOU CLEAR STATE...
            // Set this manual cursor to the earliest submission date you want fetch.
            const manualCursor = '2025-02-06T22:00:07.922Z';

            state.cursor = state.lastEnd || manualCursor;

            if (!state.cursor)
              throw new Error(
                'Please define a cursor date no greater than 1 week ago and try again'
              );
            if (isMoreThanAWeekOld(state.cursor))
              throw new Error(
                `cursor ${state.cursor} is older than 1 week. OpenFn will not sync Kobo records that are older than 1 week to avoid overwriting data in Asana.`
              );

            console.log('Current cursor value:', state.cursor);

            const formsList = sheetsData.map(survey => ({
              formId: survey.uid,
              tag: survey.tag,
              name: survey.name,
              projectid: survey.asana_projectid,
            }));

            console.log('# of GRM forms detected in Sheet:: ', formsList.length);
            console.log(
              'List of forms to re-sync:: ',
              JSON.stringify(formsList, null, 2)
            );
            //TODO: Remove
            let query = state.range ? `&query={"_submission_time":{"$lt":"2025-06-21T08:00:06.083Z","$gte":"2025-06-19T15:01:18.213Z"}}
          ` : `&query={"_submission_time":{"$gte":"${state.cursor}"}}`
            ////

            state.data = {
              surveys: sheetsData.map(survey => ({
                projectid: survey.asana_projectid ,
                formId: survey.uid,
                tag: survey.tag,
                name: survey.name,
                owner: survey.owner,
                url: `https://kf.kobotoolbox.org/api/v2/assets/${survey.uid}/data/?format=json`,
                query: `&query={"_submission_time":{"$gte":"${state.cursor}"}}`,
              })),
            };
            
            console.log('mapped sheetsData::', JSON.stringify(state.data, null,2)); 
            
            return state;
          });

          fn(state => {
            // let lastEnd = state.references
            //   .filter(item => item.body)
            //   .map(s => s.body.end)
            //   .sort((a, b) => new Date(b.date) - new Date(a.date))[0];

            let lastEnd = new Date().toISOString();

            console.log('New cursor value:', lastEnd);
            return { ...state, references: [], lastEnd };
          });

      GRM-Fetch-2-Get-Kobo-Forms-Ongoing:
        name: GRM-Fetch-2 Get Kobo Forms Ongoing
        adaptor: '@openfn/language-http@3.1.11'
        credential: rediet@openfn.org-WCS-GRM-Kobo---RAW-cred
        body: |
          // Here we fetch submissions for all deployed "GRM" forms in GoogleSheet
          // NOTE: See linked job "[GRM-A] 1.Get FormsList (Ongoing)" for cursor & GoogleSheet query logic
          //**********************************************************//
          fn(state => {
            state.errors = [];
            state.globalIndex = 0;
            state.regionKeyMap = {
              'East Africa Western Indian Ocean & Madagascar': 'eaw_workflowUrl',
              'Global': 'glo_workflowUrl',
              'Greater Mekong': 'gmk_workflowUrl',
              'Andes, Amazon & Orinoco': 'aao_workflowUrl',
              'Central Africa & Gulf of Guinea': 'cag_workflowUrl',
              'Mesoamerica & Western Caribbean': 'mwc_workflowUrl',
              'Patagonia': 'pat_workflowUrl',
              'Southeast Asia Pacific': 'sap_workflowUrl',
              'Sudano-Sahel': 'sus_workflowUrl'
            };
            return state;
          });

          each(dataPath('surveys[*]'), state => {
            const { url, query, tag, formId, formType, name, owner, projectid } =
              state.data;
            console.log('Sending GET to ::', `${url}${query}`); 
            return get(`${url}${query}`, {}, state => {
              state.data.submissions = state.data.results.map((submission, i) => {
                return {
                  i,
                  // Here we append the tags defined above to the Kobo form submission data
                  formId,
                  projectid,
                  formName: name,
                  formOwner: owner,
                  formType,
                  body: submission,
                };
              });
              const count = state.data.submissions.length;
              console.log(`Fetched ${count} submissions from ${formId} (${name}).`);
              //Once we fetch the data, we want to post each individual Kobo survey
              //back to the OpenFn inbox to run through the jobs =========================
              return each(dataPath('submissions[*]'), state => {
                const formMeta = state.sheetsData.find(row => row.uid === formId);
                if (!formMeta) throw new Error(`No metadata for formId ${formId}`);

                const regionKey = state.regionKeyMap[formMeta.Region];
                const workflowUrl = state.configuration[regionKey];

                if (!workflowUrl) {
                  throw new Error(`No workflow URL configured for region: "${formMeta.Region}" and formId "${formMeta.formId}"`);
                }
                console.log(`Posting ${state.data.i + 1} of ${count}...`);
                console.log(`Submission id:: ${state.data.body._id}`);

                console.log("workflowUrl " + formMeta.Region, ": ", workflowUrl); //TODO remove
                return post(workflowUrl, {
                  body: state => state.data,
                })(state);
              })(state);
            })(state).catch(err => {
               const errors = state.errors || []; 
               errors.push({
                  formId,
                  message: err.message,
                });
                state.errors = errors;
                console.log(`Error fetching submissions from  ${formId}::`, err.message);
                return state;
              });
          });

          //Throw errors at the end of the job if we failed to extract any Kobo forms
          fn(state => {
            if (!state.errors) return state;
           
            if (state.errors ? state.errors.length > 0 : false){
              console.log('ERROR: Failed Kobo extracts :: ', JSON.stringify(state.errors, null,2)); 
              throw new Error(
                `ERROR: ${state.errors.length} Kobo form extracts failed - please check permissions & ids! See above logs for formIds.`
              );
            }  
            return state; 
          });

    triggers:
      cron:
        type: cron
        cron_expression: '0 */1 * * *'
        enabled: false
    edges:
      cron->GRM-Fetch-1-Get-FormsList-Ongoing:
        source_trigger: cron
        target_job: GRM-Fetch-1-Get-FormsList-Ongoing
        condition_type: always
        enabled: true
      GRM-Fetch-1-Get-FormsList-Ongoing->GRM-Fetch-2-Get-Kobo-Forms-Ongoing:
        source_job: GRM-Fetch-1-Get-FormsList-Ongoing
        target_job: GRM-Fetch-2-Get-Kobo-Forms-Ongoing
        condition_type: on_job_success
        enabled: true
  AAO-Sync-to-Asana:
    name: AAO Sync to Asana
    jobs:
      Triage-jobs:
        name: Triage jobs
        adaptor: '@openfn/language-common@2.5.0'
        credential: null
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
               Country_Bolivia: '1203150662724252',
            Country_Brazil: '1203150662724253',
            Country_Colombia: '1203150662724254',
            Country_Ecuador: '1203150662724255',
            Country_Peru: '1203150662724256',
            Country_Indeterminado: '1203150662724257',
            Donor_AFD: '1207470695842883',
            Donor_BAF: '1207470914898964',
            Donor_BEF: '1207470928895774',
            Donor_EU: '1207470928895775',
            Donor_GEF: '1207470928895776',
            Donor_INL: '1207470928895777',
            Donor_LLF: '1207470928895778',
            Donor_NOAA: '1207470928895779',
            Donor_MACP: '1207470928895780',
            'Donor_REDD+': '1207470928895781',
            Donor_USAID: '1207470928895782',
            'Donor_World Bank': '1207551210258645',
            WcsStaff_Yes: '1207934086722710',
            WcsStaff_No: '1207934086722711',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            Anonymous_Anonymous: '1203977086782816',
            Gender_Male: '1202330737362427',
            Gender_Female: '1202330737362428',
            'Gender_Mixed gender (group)': '1202330737362429',
            'Gender_Unknown gender': '1202330737362430',
            'Gender_Other gender': '1207852335266397',
            'Gender_Prefer not to report': '1207852335266398',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            IndigenousPeople_mixed_group: '1207724962870243',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            GrievanceType_RelatedProjects: '1187634487549316',
            GrievanceType_LandTerritory: '1187634487549317',
            GrievanceType_WildlifeConflict: '1187634487549318',
            GrievanceType_OtherIssues: '1201884389902967',
            GrievanceType_Suggestion: '1201884389905045',
            GrievanceReportFormat_InPerson: '1192836094355011',
            GrievanceReportFormat_PhoneCall: '1192836094355012',
            GrievanceReportFormat_TextMessage: '1192847692374160',
            GrievanceReportFormat_SuggestionBox: '1207122874564877',
            GrievanceReportFormat_Email: '1192847692376214',
            GrievanceReportFormat_PostalLetter: '1192847692376223',
            GrievanceReportFormat_DirectSubmission: '1207001942658468',
            GrievanceReportFormat_OnlineGlobalGRMForm: '1205980239099429'
          };

            return { ...state, formatMapping };
          });

          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.GrievanceID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptioGrievance'),
                custom_fields: {
                          // Fields  belonging to open-ended questions (qxns that accept free text input)
          '1203711959959076': dataValue('body.StaffName'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1203150636879068': dataValue('body.DateGrievanceReceived'), // this is Submission Date in Asana
          '1203712064304976': dataValue('body.ReporterFullName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1201884379104074': dataValue('body.GrievanceID'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1203984479412129': dataValue('body.WhenGrievance'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203829521790026': dataValue('body.DescriptioGrievance'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1203150636874723': dataValue('body.OneDriveFolder'),
          '1203830309880883': dataValue('body.WhatProject'),
          '1203829521790031': dataValue('body.Suggestion'),

          // Fields  belonging to questions with dropdown or multiple choice
          '1187328718760774': state => state.formatMapping["GrievanceStatus _" + dataValue('body.GrievanceStatus ')(state)],
          '1203150662724247': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202593715272940': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
          '1204269608862901': state => state.formatMapping["Classification_" + dataValue('body.Classification')(state)],
          '1203150662724251': state => state.formatMapping["Country_" + dataValue('body.Country')(state)],
          '1207470695842882': state => state.formatMapping["Donor_" + dataValue('body.WhatDonor')(state)],
          '1207934086722709': state => state.formatMapping["WcsStaff_" + dataValue('body.WcsStaff')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1203977086782815': state => state.formatMapping["Anonymous_" + dataValue('body.Anonymous')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
          '1187634487549315': state => state.formatMapping["GrievanceType_" + dataValue('body.GrievanceType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
           }
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM04b-Upsert-AAO-Int-Grievances:
        name: GRM04b Upsert AAO Int Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            GrievanceOrSuggestion_Grievance: '1203830364115982',
            GrievanceOrSuggestion_Suggestion: '1203830364115983',
            Country_Bolivia: '1203830401179864',
            Country_Brazil: '1203830401179865',
            Country_Colombia: '1203830401179866',
            Country_Ecuador: '1203830401179867',
            Country_Peru: '1203830401179868',
            Country_Indeterminado: '1203830401179869',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_PostalLetter: '1202330347503544',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_SuggestionBox: '1202330347499327',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            'GrievanceStatus _BeingReviewed': '1192850232576003',
            'GrievanceStatus _NotAssigned': '1187328718760775',
            'GrievanceStatus _Dismissed': '1187674280676653',
            'GrievanceStatus _OnHold': '1187328718760778',
            'GrievanceStatus _BeingInvestigated': '1187328718760776',
            'GrievanceStatus _Resolved': '1187328718760777',
            'GrievanceStatus _RemediationBeingMonitored': '1192772373678248',
            GrievanceType_RelatedProjects: '1187634487549316',
            GrievanceType_LandTerritory: '1187634487549317',
            GrievanceType_WildlifeConflict: '1187634487549318',
            GrievanceType_OtherIssues: '1201884389902967',
            GrievanceType_Suggestion: '1201884389905045',
            GrievanceReportFormat_InPerson: '1192836094355011',
            GrievanceReportFormat_VoiceCall: '1192836094355012',
            GrievanceReportFormat_TextMessage: '1192847692374160',
            GrievanceReportFormat_Email: '1192847692376214',
            GrievanceReportFormat_PostalLetter: '1192847692376223',
            'Confidentiality or Sensitivity_Yes': '1203830401198952',
            'Confidentiality or Sensitivity_No': '1203830401198953'
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.ReporterFullName')(state)}_${dataValue('body.WhenGrievance')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptioGrievance'),
                custom_fields: {
                  // Fields  belonging to open-ended questions (qxns that accept free text input)
          '1203711959959076': dataValue('body.StaffName'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1203830401198936': dataValue('body.DateGrievanceEntered'),
          '1203712064304976': dataValue('body.ReporterFullName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1203830309880883': dataValue('body.WhatProject'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1203984485905764': dataValue('body.WhenGrievance'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          //'1203830401179888': dataValue('body.DescriptioGrievance'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1203830401198931': dataValue('body.Suggestion'),
          '1201884379104074': dataValue('body.GrievanceID'),

          // Fields  belonging to questions with dropdown or multiple choice
          '1203830364115981': state => state.formatMapping["GrievanceOrSuggestion_" + dataValue('body.GrievanceOrSuggestion')(state)],
          '1203830401179863': state => state.formatMapping["Country_" + dataValue('body.Country')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
          '1187328718760774': state => state.formatMapping["GrievanceStatus _" + dataValue('body.GrievanceStatus ')(state)],
          '1187634487549315': state => state.formatMapping["GrievanceType_" + dataValue('body.GrievanceType')(state)],
          '1192836094355010': state => state.formatMapping["GrievanceReportFormat_" + dataValue('body.GrievanceReportFormat')(state)],
          '1203830401198951': state => state.formatMapping["Confidentiality or Sensitivity_" + dataValue('body.Confidentiality or Sensitivity')(state)],
                   },
                },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM04-Upsert-AAO-Ext-Grievances:
        name: GRM04 Upsert AAO Ext Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
               Country_Bolivia: '1203150662724252',
            Country_Brazil: '1203150662724253',
            Country_Colombia: '1203150662724254',
            Country_Ecuador: '1203150662724255',
            Country_Peru: '1203150662724256',
            Country_Indeterminado: '1203150662724257',
            Donor_AFD: '1207470695842883',
            Donor_BAF: '1207470914898964',
            Donor_BEF: '1207470928895774',
            Donor_EU: '1207470928895775',
            Donor_GEF: '1207470928895776',
            Donor_INL: '1207470928895777',
            Donor_LLF: '1207470928895778',
            Donor_NOAA: '1207470928895779',
            Donor_MACP: '1207470928895780',
            'Donor_REDD+': '1207470928895781',
            Donor_USAID: '1207470928895782',
            'Donor_World Bank': '1207551210258645',
            WcsStaff_Yes: '1207934086722710',
            WcsStaff_No: '1207934086722711',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            Anonymous_Anonymous: '1203977086782816',
            Gender_Male: '1202330737362427',
            Gender_Female: '1202330737362428',
            'Gender_Mixed gender (group)': '1202330737362429',
            'Gender_Unknown gender': '1202330737362430',
            'Gender_Other gender': '1207852335266397',
            'Gender_Prefer not to report': '1207852335266398',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            IndigenousPeople_mixed_group: '1207724962870243',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            GrievanceType_RelatedProjects: '1187634487549316',
            GrievanceType_LandTerritory: '1187634487549317',
            GrievanceType_WildlifeConflict: '1187634487549318',
            GrievanceType_OtherIssues: '1201884389902967',
            GrievanceType_Suggestion: '1201884389905045',
            GrievanceReportFormat_InPerson: '1192836094355011',
            GrievanceReportFormat_PhoneCall: '1192836094355012',
            GrievanceReportFormat_TextMessage: '1192847692374160',
            GrievanceReportFormat_SuggestionBox: '1207122874564877',
            GrievanceReportFormat_Email: '1192847692376214',
            GrievanceReportFormat_PostalLetter: '1192847692376223',
            GrievanceReportFormat_DirectSubmission: '1207001942658468',
            GrievanceReportFormat_OnlineGlobalGRMForm: '1205980239099429'
          };

            return { ...state, formatMapping };
          });

          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.GrievanceID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptioGrievance'),
                custom_fields: {
                          // Fields  belonging to open-ended questions (qxns that accept free text input)
          '1203711959959076': dataValue('body.StaffName'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1203150636879068': dataValue('body.DateGrievanceReceived'), // this is Submission Date in Asana
          '1203712064304976': dataValue('body.ReporterFullName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1201884379104074': dataValue('body.GrievanceID'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1203984479412129': dataValue('body.WhenGrievance'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203829521790026': dataValue('body.DescriptioGrievance'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1203150636874723': dataValue('body.OneDriveFolder'),
          '1203830309880883': dataValue('body.WhatProject'),
          '1203829521790031': dataValue('body.Suggestion'),

          // Fields  belonging to questions with dropdown or multiple choice
          '1187328718760774': state => state.formatMapping["GrievanceStatus _" + dataValue('body.GrievanceStatus ')(state)],
          '1203150662724247': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202593715272940': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
          '1204269608862901': state => state.formatMapping["Classification_" + dataValue('body.Classification')(state)],
          '1203150662724251': state => state.formatMapping["Country_" + dataValue('body.Country')(state)],
          '1207470695842882': state => state.formatMapping["Donor_" + dataValue('body.WhatDonor')(state)],
          '1207934086722709': state => state.formatMapping["WcsStaff_" + dataValue('body.WcsStaff')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1203977086782815': state => state.formatMapping["Anonymous_" + dataValue('body.Anonymous')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
          '1187634487549315': state => state.formatMapping["GrievanceType_" + dataValue('body.GrievanceType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
           }
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Triage-jobs:
        source_trigger: webhook
        target_job: Triage-jobs
        condition_type: always
        enabled: true
      Triage-jobs->GRM04b-Upsert-AAO-Int-Grievances:
        source_job: Triage-jobs
        target_job: GRM04b-Upsert-AAO-Int-Grievances
        condition_type: js_expression
        condition_label: Old AAO Int form
        condition_expression: |
          state.data.formName == "AAO Interno Grievance_Form_20220831"
        enabled: true
      Triage-jobs->GRM04-Upsert-AAO-Ext-Grievances:
        source_job: Triage-jobs
        target_job: GRM04-Upsert-AAO-Ext-Grievances
        condition_type: js_expression
        condition_label: New AAO Ext form
        condition_expression: |
          state.data.formName == "Mecanismo de Atención de Peticiones, Quejas y Reclamos"
        enabled: true
  CAGG-Sync-to-Asana:
    name: CAGG Sync to Asana
    jobs:
      Transform-data:
        name: Transform data
        adaptor: '@openfn/language-common@2.5.0'
        credential: null
        body: |
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide

      GRM03-Upsert-Ituri-Grievances-in-Asana:
        name: GRM03 Upsert Ituri Grievances in Asana
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
              SubmissionType_Grievance: '1202329899911646',
              SubmissionType_Suggestion: '1202329899911647',
              SubmissionType_Request: '1202329899911648',
              SubmissionType_Feedback: '1202329899911649',
              ReportFormat_InPerson: '1202330347493011',
              ReportFormat_VoiceCall: '1202330347494027',
              ReportFormat_TextMessage: '1202330347498273',
              ReportFormat_SuggestionBox: '1202330347499327',
              ReportFormat_Hotline: '1202330347501419',
              ReportFormat_Email: '1202330347502485',
              ReportFormat_PostalLetter: '1202330347503544',
              SubmissionContext_individual: '1202330732062943',
              SubmissionContext_group: '1202330732067344',
              SubmissionContext_passive_observation: '1202330732068565',
              Gender_male: '1202330737362427',
              Gender_female: '1202330737362428',
              Gender_mixed_gender: '1202330737362429',
              Gender_unknown_gender: '1202330737362430',
              IndigenousPeople_Yes_ips: '1202330755980982',
              IndigenousPeople_No_ips: '1202330755984093',
              IndigenousPeople_unknown_ips: '1202330755985164',
              'Age_<18': '1202330714895607',
              'Age_19-35': '1202330714895608',
              'Age_36-50': '1202330714895609',
              'Age_>50': '1202330714895610',
              Age_mixed_age: '1202330714895611',
              Age_unknown_age: '1202330714895612',
              GrievanceAgainst_Wcs: '1202330466059593',
              GrievanceAgainst_GovernmentPartner: '1202330466059594',
              GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
              GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
              GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
              DatePrecision_Yes: '1202330815421248',
              DatePrecision_No: '1202330815421249',
              ConfidentialitySensitivity_Yes: '1202330821410493',
              ConfidentialitySensitivity_No: '1202330821410494'
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.CaseID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'),
                custom_fields: {
                  // Fields  belonging to open-ended questions (qxns that accept free text input)
                  '1202329899911593': dataValue('body.StaffName'),
                  '1202329899911595': dataValue('body.CaseID'),
                  '1202329899911597': dataValue('body.StaffEmail'),
                  '1202329899911599': dataValue('body.today'), // The Kobo value "today" is used to fill the "Submission Date" in Asana
                  '1204411543329531': dataValue('body.SubmissionDate'), // the kobo value "SubmissionDate" is used to fill the "Deposit date" in Asana
                  '1204398350066782': dataValue('body.SuggestionBoxId'),
                  '1204398351814002': dataValue('body.SuggestionBoxGps'),
                  '1204398351814004': dataValue('body.BoxCollectionDate'),
                  '1202329899911605': dataValue('body.ReporterName'),
                  '1202329899911607': dataValue('body.ReporterContactInformation'),
                  '1202329899911615': dataValue('body.AuthorityGrievanceReporter'),
                  '1202329899911619': dataValue('body.WhereGrievance'),
                  '1202329899911623': dataValue('body.GrievanceDate'),
                  '1202329899911625': dataValue('body.PartiesInvolvedGrievance'),
                  '1202329899911627': dataValue('body.LocalAuthoritiesContacted'),
                  '1202329899911631': dataValue('body.HarmSuffered'),
                  '1202329899911633': dataValue('body.ReliefRequested'),
                  '1202329899911635': dataValue('body.OnlineFolder'),
                  '1202329899911637': dataValue('body.Location'),
                  
                  // Fields  belonging to questions with dropdown or multiple choice
                  '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
                  '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
                  '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
                  '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
                  '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
                  '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
                  '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
                  '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
                  '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
                }
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM06-Upsert-KBNP-Grievances:
        name: GRM06 Upsert KBNP Grievances
        adaptor: '@openfn/language-asana@4.1.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {

            SubmissionType_Grievance: '1203958690339474',
            SubmissionType_Suggestion: '1203958690339475',
            SubmissionType_Request: '1203958690339476',
            SubmissionType_Feedback: '1203958690339477',
             ReportFormat_InPerson: '1202330347493011',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_Prospecting: '1208419056473280',
            SubmissionContext_individual: '1202330732062943',
            SubmissionContext_group: '1202330732067344',
            SubmissionContext_passive_observation: '1202330732068565',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            IndigenousPeople_mixed_group: '1207724962870243',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            DatePrecision_Yes: '1202330815421248',
            DatePrecision_No: '1202330815421249',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            Groupement_Bakano: '1208521520130881',
            Groupement_Bakonzo: '1208521520130882',
            Groupement_BamugubaNord: '1208521520130883',
            Groupement_BamugubaSud: '1208521520130884',
            Groupement_Bitale: '1208521520130885',
            Groupement_Bughore: '1208521520130886',
            Groupement_Bugobe: '1208406425574584',
            Groupement_Bunyakiri: '1208406425574588',
            Groupement_Bushwira: '1208521520130887',
            Groupement_Cirunga: '1208521520130888',
            Groupement_Ikoma: '1208521520130889',
            Groupement_IrhambiKatana: '1208406425574586',
            Groupement_Irhegabarhonyi: '1208521520130890',
            Groupement_Izege: '1208521520130891',
            Groupement_Kalima: '1208521520130892',
            Groupement_Kalonge: '1208406425574585',
            Groupement_Kanyola: '1208521520130893',
            Groupement_Luhago: '1208521520130894',
            Groupement_MbingaNord: '1208521520130895',
            Groupement_MbingaSud: '1208406425574587',
            Groupement_Miti: '1208406425574582',
            Groupement_Mubugu: '1208521520130896',
            Groupement_Mudaka: '1208406425574583',
            Groupement_Musenyi: '1208521520130897',
            Groupement_Nindja: '1208521520130898',
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.CaseID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'),
                custom_fields: {
                 // Fields  belonging to open-ended questions (qxns that accept free text input)
          '1203958690339485': dataValue('body.StaffName'),
          '1203958690339489': dataValue('body.CaseID'),
          '1203958690339493': dataValue('body.StaffEmail'),
          '1203958690339497': dataValue('body.today'), // The Today value in Kobo goes into Submission Date in Asana
          '1203958690356245': dataValue('body.ReporterName'),
          '1203958690356249': dataValue('body.ReporterContactInformation'),
          '1203958690356256': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1203958690356266': dataValue('body.GrievanceDate'),
          '1203958690356270': dataValue('body.PartiesInvolvedGrievance'),
          '1203958690356274': dataValue('body.LocalAuthoritiesContacted'),
          '1203958690374468': dataValue('body.HarmSuffered'),
          '1203958690374472': dataValue('body.ReliefRequested'),
          '1203958690374476': dataValue('body.OnlineFolder'),
          '1203958690374480': dataValue('body.Location'),
          '1205016004799740': dataValue('body.SuggestionBoxId'),
          '1204411543329531': dataValue('body.SubmissionDate'), // The Submission Date in Kobo goes to the Deposit Date in Asana
          '1204398351814004': dataValue('body.BoxCollectionDate'),
          '1204398351814002': dataValue('body.SuggestionBoxGps'),

          // Fields  belonging to questions with dropdown or multiple choice
          '1203958686294706': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
          '1203958690339473': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
          '1208406425574581': state => state.formatMapping["Groupement_" + dataValue('body.Groupement')(state)],
              },
            },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM09-Update-PNMD-Grievances:
        name: GRM09 Update PNMD Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            SubmissionType_Grievance: '1202329899911646',
            SubmissionType_Suggestion: '1202329899911647',
            SubmissionType_Request: '1202329899911648',
            SubmissionType_Feedback: '1202329899911649',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_PostalLetter: '1202330347503544',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Hotline: '1202330347501419',
            SubmissionContext_individual: '1202330732062943',
            SubmissionContext_group: '1202330732067344',
            SubmissionContext_passive_observation: '1202330732068565',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            DatePrecision_Yes: '1202330815421248',
            DatePrecision_No: '1202330815421249',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.CaseID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'),
                custom_fields: {
                  // Fields  belonging to open-ended questions (qxns that accept free text input)
                 '1203711959959076': dataValue('body.StaffName'),
          '1202329899911595': dataValue('body.CaseID'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1204909111988165': dataValue('body.DepositDate'),
          '1202329899911605': dataValue('body.ReporterName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1202329899911623': dataValue('body.GrievanceDate'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1202329899911635': dataValue('body.OnlineFolder'),
          '1204909114362354': dataValue('body.SuggestionBoxId'),
          '1204909114362363': dataValue('body.SuggestionBoxGps'),
          '1204909114362367': dataValue('body.BoxCollectionDate'),
          '1202329899911599': dataValue('body.SubmissionDate'),
          '1204909114384912': dataValue('body.Location'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          // Fields  belonging to questions with dropdown or multiple choice
          '1202593715272940': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
          '1204269608862901': state => state.formatMapping["Classification_" + dataValue('body.Classification')(state)],
                }
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM10-Update-Ndoki-Grievances:
        name: GRM10 Update Ndoki Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = 
            {
            'Grade_Grade 0': '1202593715272941',
            'Grade_Grade 1': '1202593715272942',
            'Grade_Grade 2': '1202593715272943',
            'Grade_Grade 3': '1202593715272944',
            'Grade_Grade 4': '1202593715272945',
            'Grade_Grade 5': '1202593715272946',
            'Grade_Potential 4 or 5': '1204479351083660',
            'Classification_Safeguards & Human Rights': '1204269608862902',
            'Classification_Project Implementation & Natural Resources': '1204269608862903',
            'Classification_Human-Wildlife Conflict': '1204269608862904',
            'Classification_Management ': '1204269617420857',
            'Classification_Illegal Activity': '1204269617420858',
            'Classification_Positive Feedback, Suggestion': '1204269617420859',
            'Classification_Request or Question': '1204269617420968',
            Classification_Other: '1204269617420860',
            SubmissionType_Grievance: '1202329899911646',
            SubmissionType_Suggestion: '1202329899911647',
            SubmissionType_Request: '1202329899911648',
            SubmissionType_Feedback: '1202329899911649',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_PostalLetter: '1202330347503544',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Hotline: '1202330347501419',
            SubmissionContext_individual: '1202330732062943',
            SubmissionContext_group: '1202330732067344',
            SubmissionContext_passive_observation: '1202330732068565',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            DatePrecision_Yes: '1202330815421248',
            DatePrecision_No: '1202330815421249',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494'
          }
          ;

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.CaseID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'),
                custom_fields: {
                  // Fields  belonging to open-ended questions (qxns that accept free text input)
          '1202329899911595': dataValue('body.CaseID'),
          '1203711959959076': dataValue('body.StaffName'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1202329899911599': dataValue('body.today'),// The Kobo value "today" is used to fill the "Submission Date" in Asana
          '1204987862967325': dataValue('body.SubmissionDate'), // the kobo value "SubmissionDate" is used to fill the "Deposit date" in Asana
          '1204987862967339': dataValue('body.SuggestionBoxGps'),
          '1204987862967330': dataValue('body.SuggestionBoxId'),
          '1204987862994295': dataValue('body.BoxCollectionDate'),
          '1202329899911605': dataValue('body.ReporterName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1202329899911623': dataValue('body.GrievanceDate'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1202329899911635': dataValue('body.OnlineFolder'),
          '1204987862994316': dataValue('body.Location'),
          // Fields  belonging to questions with dropdown or multiple choice
          '1202593715272940': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
          '1204269608862901': state => state.formatMapping["Classification_" + dataValue('body.Classification')(state)],
          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
                }
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM13-Upsert-Mbe-Mountains-Grievances:
        name: GRM13 Upsert Mbe Mountains Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            SubmissionType_Grievance: '1202329899911646',
            SubmissionType_Suggestion: '1202329899911647',
            SubmissionType_Request: '1202329899911648',
            SubmissionType_Feedback: '1202329899911649',
            'SubmissionType_Test case': '1206023522074189',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_PostalLetter: '1202330347503544',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Hotline: '1202330347501419',
            SubmissionContext_individual: '1202330732062943',
            SubmissionContext_group: '1202330732067344',
            SubmissionContext_passive_observation: '1202330732068565',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            DatePrecision_Yes: '1202330815421248',
            DatePrecision_No: '1202330815421249',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            Village_Abu: '1206427761204002',
            'Village_Abu Bisu': '1206427761204003',
            'Village_Kayan 1': '1206427761204004',
            'Village_Kayan 2': '1206427761204005',
            'Village_Wula 1': '1206427761204006',
            'Village_Wula 2': '1206427761204007',
            Village_Bukalum: '1206427761204008',
            Village_Bambam: '1206427761204009',
            'Village_Mbo-mkpang': '1206427761204010'
          };

            return { ...state, formatMapping };
          });

          upsertTask(
            dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1201382240883590', //hardcoded project id

            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                    `${dataValue('body.CaseID')(state)} (KoboID:${dataValue('body._id')(state)})`, // !! UPDATE THE ID FIELD TO ALIGN WITH THE KOBO FORM IF NEEDED
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'), // !! UPDATE THE DESCRIPTION FIELD TO ALIGN WITH THE KOBO FORM IF NEEDED
                custom_fields: {
                    //This tells Asana what fields to update and how to locate them.
                    
                    //The statements below apply to Asana Fields that are for OPEN ENDED
                    //i.e. They accept FREE TEXT INPUT from the Kobo Form
          '1203711959959076': dataValue('body.StaffName'),
          '1202329899911595': dataValue('body.CaseID'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1204987877735031': dataValue('body.DepositDate'), 
          '1202329899911599': dataValue('body.today'), // Kobo form field "Today" goes into "SubmissionDate" field in Asana
          '1204987880815869': dataValue('body.SuggestionBoxId'),
          '1204987880815882': dataValue('body.BoxCollectionDate'),
          '1202329899911605': dataValue('body.ReporterName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1205639010623290': dataValue('body.Village'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1202329899911623': dataValue('body.GrievanceDate'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1202329899911635': dataValue('body.OnlineFolder'),
          '1204987880842598': dataValue('body.Location'),

                  // Fields  belonging to questions with dropdown or multiple choice
          '1202593715272940': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
          '1204269608862901': state => state.formatMapping["Classification_" + dataValue('body.Classification')(state)],
          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1206427761204001': state => state.formatMapping["Village_" + dataValue('body.Village')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
                },
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          );

      GRM16-Upsert-Afi-Grievances:
        name: GRM16 Upsert Afi Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            SubmissionType_Grievance: '1202329899911646',
            SubmissionType_Suggestion: '1202329899911647',
            SubmissionType_Request: '1202329899911648',
            SubmissionType_Feedback: '1202329899911649',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            SubmissionContext_individual: '1202330732062943',
            SubmissionContext_group: '1202330732067344',
            SubmissionContext_passive_observation: '1202330732068565',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            DatePrecision_Yes: '1202330815421248',
            DatePrecision_No: '1202330815421249',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            Village_Buancho: '1208340639080055',
            Village_Olum: '1208340639080056',
            Village_Kakubo: '1208340639080057',
            Village_Esekwe: '1208340639080058',
            Village_NjuaKaku: '1208340639080059',
            Village_Boje: '1208340639080060',
            Village_Katabang: '1208340639080061'
          };

            return { ...state, formatMapping };
          });

          upsertTask(
            dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1201382240883590', //hardcoded project id

            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                    `${dataValue('body.CaseID')(state)} (KoboID:${dataValue('body._id')(state)})`, // !! UPDATE THE ID FIELD TO ALIGN WITH THE KOBO FORM IF NEEDED
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'), // !! UPDATE THE DESCRIPTION FIELD TO ALIGN WITH THE KOBO FORM IF NEEDED
                custom_fields: {
                    //This tells Asana what fields to update and how to locate them.
                    
                    //The statements below apply to Asana Fields that are for OPEN ENDED
                    //i.e. They accept FREE TEXT INPUT from the Kobo Form
          '1203711959959076': dataValue('body.StaffName'),
          '1202329899911595': dataValue('body.CaseID'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1208202649310012': dataValue('body.DepositDate'),
          '1202329899911599': dataValue('body.today'), // Kobo form field "Today" goes into "SubmissionDate" field in Asana
          '1208202649310017': dataValue('body.SuggestionBoxId'),
          '1208202649310027': dataValue('body.BoxCollectionDate'),
          '1202329899911605': dataValue('body.ReporterName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1202329899911623': dataValue('body.GrievanceDate'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1202329899911635': dataValue('body.OnlineFolder'),
          '1208202649310032': dataValue('body.Location'),

                  // Fields  belonging to questions with dropdown or multiple choice
          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
          '1207470695842882': state => state.formatMapping["Donor_" + dataValue('body.Donor')(state)],
          '1208340639080054': state => state.formatMapping["Village_" + dataValue('body.Village')(state)],
                },
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          );

      GRM17-Upsert-Yankari-Grievances:
        name: GRM17 Upsert Yankari Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
           SubmissionType_Grievance: '1202329899911646',
            SubmissionType_Suggestion: '1202329899911647',
            SubmissionType_Request: '1202329899911648',
            SubmissionType_Feedback: '1202329899911649',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            SubmissionContext_individual: '1202330732062943',
            SubmissionContext_group: '1202330732067344',
            SubmissionContext_passive_observation: '1202330732068565',
            Village_YelwanDuguri: '1208360193118210',
            Village_GajiDuguri: '1208360193118211',
            Village_Kwalla: '1208360193118212',
            Gender_Male: '1202330737362427',
            Gender_Female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            Gender_other_gender: '1207852335266397',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            DatePrecision_Yes: '1202330815421248',
            DatePrecision_No: '1202330815421249',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
          };

            return { ...state, formatMapping };
          });

          upsertTask(
            dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1201382240883590', //hardcoded project id

            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                    `${dataValue('body.CaseID')(state)} (KoboID:${dataValue('body._id')(state)})`, // !! UPDATE THE ID FIELD TO ALIGN WITH THE KOBO FORM IF NEEDED
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'), // !! UPDATE THE DESCRIPTION FIELD TO ALIGN WITH THE KOBO FORM IF NEEDED
                custom_fields: {
                    //This tells Asana what fields to update and how to locate them.
                    
                    //The statements below apply to Asana Fields that are for OPEN ENDED
                    //i.e. They accept FREE TEXT INPUT from the Kobo Form
          '1203711959959076': dataValue('body.StaffName'),
          '1202329899911595': dataValue('body.CaseID'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1208202588470235': dataValue('body.DepositDate'),
          '1202329899911599': dataValue('body.today'), // Kobo form field "Today" goes into "SubmissionDate" field in Asana
          '1208202588470240': dataValue('body.SuggestionBoxId'),
          '1208202588470250': dataValue('body.BoxCollectionDate'),
          '1202329899911605': dataValue('body.ReporterName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1202329899911623': dataValue('body.GrievanceDate'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1202329899911635': dataValue('body.OnlineFolder'),
          '1208202588470255': dataValue('body.Location'),
                  // Fields  belonging to questions with dropdown or multiple choice
          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
          '1208360193118209': state => state.formatMapping["Village_" + dataValue('body.Village')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
                },
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          );

      GRM20-Upsert-Kabobo-Grievances:
        name: GRM20 Upsert Kabobo Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
              
            SubmissionType_Grievance: '1209077505622424',
            SubmissionType_Suggestion: '1209077505622425',
            SubmissionType_Request: '1209077505622426',
            SubmissionType_Feedback: '1209077505622427',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_ProjectMeeting: '1208936305975370',
            ReportFormat_Prospecting: '1208419056473280',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_VoiceCall: '1202330347494027',
            SubmissionContext_individual: '1202330732062943',
            SubmissionContext_group: '1202330732067344',
            SubmissionContext_passive_observation: '1202330732068565',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            IndigenousPeople_mixed_group: '1207724962870243',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            Groupement_Kasangamutowa: '1209077505731521',
            Groupement_Lambokatenga: '1209077505731523',
            Groupement_Mahila: '1209077505731520',
            Groupement_Miketo: '1209077505758635',
            Groupement_Mulolwa: '1209077505731522',
            DatePrecision_Yes: '1202330815421248',
            DatePrecision_No: '1202330815421249',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.CaseID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'),
                custom_fields: {
                 // Fields  belonging to open-ended questions (qxns that accept free text input)

          '1209077505698841': dataValue('body.today'), // The Today value in Kobo goes into KoboSubmissionDate in Asana
          '1209077505698826': dataValue('body.StaffName'),
          '1209077505698831': dataValue('body.CaseID'),
          '1209077505698836': dataValue('body.StaffEmail'),
          '1204411543329531': dataValue('body.DepositDate'),
          '1209077505731508': dataValue('body.SuggestionBoxId'),
          '1204398351814002': dataValue('body.SuggestionBoxGps'),
          '1204398351814004': dataValue('body.BoxCollectionDate'),
          '1209077505698846': dataValue('body.ReporterName'),
          '1209077505707294': dataValue('body.ReporterContactInformation'),
          '1209077505707299': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1209077505707304': dataValue('body.GrievanceDate'),
          '1209077505707309': dataValue('body.PartiesInvolvedGrievance'),
          '1209077505707314': dataValue('body.LocalAuthoritiesContacted'),
          '1209077505707319': dataValue('body.HarmSuffered'),
          '1209077505707324': dataValue('body.ReliefRequested'),
          '1209077505731499': dataValue('body.OnlineFolder'),

          // Fields  belonging to questions with dropdown or multiple choice

          '1209077505622423': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1209077505731519': state => state.formatMapping["Groupement_" + dataValue('body.Groupement')(state)],
          '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],

              },
            },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Transform-data:
        source_trigger: webhook
        target_job: Transform-data
        condition_type: always
        enabled: true
      Transform-data->GRM03-Upsert-Ituri-Grievances-in-Asana:
        source_job: Transform-data
        target_job: GRM03-Upsert-Ituri-Grievances-in-Asana
        condition_type: js_expression
        condition_label: New OWR Form
        condition_expression: |
          state.data.formName == "OWR feedback form"
        enabled: true
      Transform-data->GRM06-Upsert-KBNP-Grievances:
        source_job: Transform-data
        target_job: GRM06-Upsert-KBNP-Grievances
        condition_type: js_expression
        condition_label: New KBNP GRM
        condition_expression: |
          state.data.formName == "KBNP Feedback Form"
        enabled: true
      Transform-data->GRM09-Update-PNMD-Grievances:
        source_job: Transform-data
        target_job: GRM09-Update-PNMD-Grievances
        condition_type: js_expression
        condition_label: New PNMD GRM
        condition_expression: |
          state.data.formName == "GRM PNMD 2023"
        enabled: true
      Transform-data->GRM10-Update-Ndoki-Grievances:
        source_job: Transform-data
        target_job: GRM10-Update-Ndoki-Grievances
        condition_type: js_expression
        condition_label: New PNNN form
        condition_expression: |
          state.data.formName == "NNNP_Feedback_Form"
        enabled: true
      Transform-data->GRM13-Upsert-Mbe-Mountains-Grievances:
        source_job: Transform-data
        target_job: GRM13-Upsert-Mbe-Mountains-Grievances
        condition_type: js_expression
        condition_label: New Mbe Form
        condition_expression: |
          state.data.formName == "Mbe Mountains GRM"
        enabled: true
      Transform-data->GRM16-Upsert-Afi-Grievances:
        source_job: Transform-data
        target_job: GRM16-Upsert-Afi-Grievances
        condition_type: js_expression
        condition_label: New Afi Form
        condition_expression: |
          state.data.formName == "Afi GRM"
        enabled: true
      Transform-data->GRM17-Upsert-Yankari-Grievances:
        source_job: Transform-data
        target_job: GRM17-Upsert-Yankari-Grievances
        condition_type: js_expression
        condition_label: New YGR Form
        condition_expression: |
          state.data.formName == "YGR GRM"
        enabled: true
      Transform-data->GRM20-Upsert-Kabobo-Grievances:
        source_job: Transform-data
        target_job: GRM20-Upsert-Kabobo-Grievances
        condition_type: js_expression
        condition_label: New Kabobo Form
        condition_expression: |
          state.data.formName == "KABOBO GRM"
        enabled: true
  EAWIO-Sync-to-Asana:
    name: EAWIO Sync to Asana
    jobs:
      Triage-jobs:
        name: Triage jobs
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide

      GRM05-Upsert-Blue-Future-Grievances:
        name: GRM05 Upsert Blue Future Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
           Anonymous_Anonymous: '1203977086782816',
            Language_Portuguese: '1203977284295127',
            Language_Emakua: '1203977284295128',
            Language_English: '1203977284295129',
            Language_OtherLanguage: '1203977284295130',
            GrievanceOrSuggestion_Grievance: '1203711963400189',
            GrievanceOrSuggestion_Suggestion: '1203711963400190',
            GrievanceOrSuggestion_Doubts: '1203977213874277',
            GrievanceOrSuggestion_OtherType: '1203977213874278',
            Frequency_OneTime: '1203977373054583',
            Frequency_MultipleTimes: '1203977373054584',
            Frequency_Ongoing: '1203977373054585',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_PostalLetter: '1202330347503544',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_SuggestionBox: '1202330347499327',
            'ReportLocation_Option 1': '1203703265138772',
            'ReportLocation_Option 2': '1203703265138773',
            'ReporterLocation_Option 1': '1203703265138776',
            'ReporterLocation_Option 2': '1203703265138777',
            RegionalProgram_Global: '1203712073216294',
            RegionalProgram_EastAfricaAndMadagascar: '1203712073216295',
            Country_AllCountryPrograms: '1203712064585506',
            Country_Mozambique: '1203712075492389',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494'
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.calculation')(state)}`, // the "calculation" field in Kobo is the GrievanceID (error when creating the form - this cannot be changed now)
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'),
                custom_fields: {
                  // Fields  belonging to open-ended questions (qxns that accept free text input)
          '1203712060006636': dataValue('body.Email') || dataValue('body.Mail')|| dataValue('body.Phone'),
          '1203977275818025': dataValue('body.OtherLanguage'),
          '1203977255317509': dataValue('body.OtherType'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1203985595067011': dataValue('body.WhenGrievance'),
          '1203977007681973': dataValue('body.TimesGrievance'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1203712064304976': dataValue('body.ReporterFullName'),
          '1201884379104074': dataValue('body.calculation'), // the "calculation" field in Kobo is the GrievanceID 
          '1203711932409666': dataValue('body.today'),

                  
                  // Fields  belonging to questions with dropdown or multiple choice
                 '1203977086782815': state => state.formatMapping["Anonymous_" + dataValue('body.Anonymous')(state)],
          '1203977284295126': state => state.formatMapping["Language_" + dataValue('body.Language')(state)],
          '1203711963400188': state => state.formatMapping["GrievanceOrSuggestion_" + dataValue('body.GrievanceOrSuggestion')(state)],
          '1203977373054582': state => state.formatMapping["Frequency_" + dataValue('body.Frequency')(state)],
              },
            },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM07-Upsert-Ruaha-Katavi-Grievances:
        name: GRM07 Upsert Ruaha Katavi Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            'Grade_Grade 0': '1204127412235066',
            'Grade_Grade 1': '1204127412235067',
            'Grade_Grade 2': '1204127412235068',
            'Grade_Grade 3': '1204127412235069',
            'Grade_Grade 4': '1204127412235070',
            'Grade_Grade 5': '1204127412235071',
            GrievanceOrSuggestion_Grievance: '1203711963400189',
            GrievanceOrSuggestion_Suggestion: '1203711963400190',
            GrievanceOrSuggestion_Doubts: '1203977213874277',
            GrievanceOrSuggestion_OtherType: '1203977213874278',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_PostalLetter: '1202330347503544',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Hotline: '1202330347501419',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494'
          };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.start')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptionGrievance'),
                custom_fields: {
                 // Fields  belonging to open-ended questions (qxns that accept free text input)
          '1204127413705636': dataValue('body.start'),
          '1204127467188879': dataValue('body.Country'),
          '1204127467188881': dataValue('body.Region'),
          '1204127467188883': dataValue('body.District'),
          '1204127413724358': dataValue('body.Village'),
          '1204127413705632': dataValue('body.StaffName'),
          '1204127413705640': dataValue('body.StaffEmail'),
          '1204127413705644': dataValue('body.DateGrievanceEntered'),
          '1204127413705650': dataValue('body.ReporterFullName'),
          '1204127413715692': dataValue('body.ReporterContactInformation'),
          '1204127413715699': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1204127413715709': dataValue('body.WhenGrievance'),
          '1204127413715713': dataValue('body.PartiesInvolvedGrievance'),
          '1204127413715717': dataValue('body.LocalAuthoritiesContacted'),
          '1204127413724346': dataValue('body.HarmSuffered'),
          '1204127413724350': dataValue('body.ReliefRequested'),
          '1204127413724354': dataValue('body.OnlineFolder'),

          // Fields  belonging to questions with dropdown or multiple choice
          '1204127412235065': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
          '1203711963400188': state => state.formatMapping["GrievanceOrSuggestion_" + dataValue('body.GrievanceOrSuggestion')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
              },
            },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM08-Upsert-NiassaGrievances:
        name: GRM08 Upsert NiassaGrievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            GrievanceOrSuggestion_Grievance: '1203711963400189',
            GrievanceOrSuggestion_Suggestion: '1203711963400190',
            GrievanceOrSuggestion_Doubts: '1203977213874277',
            GrievanceOrSuggestion_OtherType: '1203977213874278',
            'CategoryGRM_Category 1': '1204346774994409',
            'CategoryGRM_Category 2': '1204346774994410',
            'CategoryGRM_Category 3': '1204346774994411',
            'CategoryGRM_Category 4': '1204346774994412',
            'CategoryGRM_Category 5': '1204346774994413',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_PostalLetter: '1202330347503544',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Hotline: '1202330347501419',
            'GrievanceStatus _BeingReviewed': '1192850232576003',
            'GrievanceStatus _NotAssigned': '1187328718760775',
            'GrievanceStatus _Dismissed': '1187674280676653',
            'GrievanceStatus _OnHold': '1187328718760778',
            'GrievanceStatus _BeingInvestigated': '1187328718760776',
            'GrievanceStatus _Resolved': '1187328718760777',
            'GrievanceStatus _RemediationBeingMonitored': '1192772373678248',
            RegionalProgram_Global: '1203712073216294',
            RegionalProgram_EastAfricaAndMadagascar: '1203712073216295',
            Country_AllCountryPrograms: '1203712064585506',
            Country_Mozambique: '1203712075492389',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494'
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.GrievanceId')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptionGrievance'),
                custom_fields: {
                 // Fields  belonging to open-ended questions (qxns that accept free text input)
          '1203711959959076': dataValue('body.StaffName'),
          '1201884379104074': dataValue('body.GrievanceId'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1203711932409666': dataValue('body.DateGrievanceEntered'),
          '1206195626473140': dataValue('body.ReportLocation'),
          '1206195626473142': dataValue('body.ReporterLocation'),
          '1203712064304976': dataValue('body.ReporterFullName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1204346774966584': dataValue('body.WhenGrievance'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1203712121887316': dataValue('body.ActionsTaken'),
          '1203711923560809': dataValue('body.OneDriveFolder'),

          // Fields  belonging to questions with dropdown or multiple choice
          '1203711963400188': state => state.formatMapping["GrievanceOrSuggestion_" + dataValue('body.GrievanceOrSuggestion')(state)],
          '1204346774986645': state => state.formatMapping["CategoryGRM_" + dataValue('body.CategoryGRM')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1204346774986620': state => state.formatMapping["ReportLocation_" + dataValue('body.ReportLocation')(state)],
          '1187328718760774': state => state.formatMapping["GrievanceStatus _" + dataValue('body.GrievanceStatus ')(state)],
          '1204346774986628': state => state.formatMapping["ReporterLocation_" + dataValue('body.ReporterLocation')(state)],
          '1203712073216293': state => state.formatMapping["RegionalProgram_" + dataValue('body.RegionalProgram')(state)],
          '1203712064585505': state => state.formatMapping["Country_" + dataValue('body.Country')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
              },
            },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM12-Upsert-Mamabay-Grievances:
        name: GRM12 Upsert Mamabay Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            GrievanceOrSuggestion_Grievance: '1202329899911646', //SubmissionType in Asana = GrievanceOrSuggestion in Kobo
            GrievanceOrSuggestion_Suggestion: '1202329899911647', //SubmissionType in Asana = GrievanceOrSuggestion in Kobo
            GrievanceOrSuggestion_Request: '1202329899911648', //SubmissionType in Asana = GrievanceOrSuggestion in Kobo
            GrievanceOrSuggestion_Feedback: '1202329899911649', //SubmissionType in Asana = GrievanceOrSuggestion in Kobo
            WcsStaff_Yes: '1208262949429785',
            WcsStaff_No: '1208262949429786',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_PostalLetter: '1202330347503544',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Hotline: '1202330347501419',
            Anonymous_Yes: '1203977086782816',
            Anonymous_No: '1208270620741491', 
            Gender_Male: '1202330737362427',
            Gender_Female: '1202330737362428',
            Gender_Male: '1202330737362427',
            Gender_Female: '1202330737362428',
            'Gender_Mixed gender (group)': '1202330737362429',
            'Gender_Unknown gender': '1202330737362430',
            'Gender_Other gender': '1207852335266397',
            'Gender_Prefer not to report': '1207852335266398',
             'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            ReportLocation_Sector1: '1205812185361966',
            ReportLocation_Sector2: '1205812185361967',
            ReportLocation_Sector3: '1205812185361968',
            ReportLocation_Sector4: '1205812185361969',
            ReportLocation_Sector5: '1205812185361970',
            ReportLocation_Sector6: '1205812185361971',
            ReportLocation_Sector7: '1205812185361972',
            ReportLocation_Sector8: '1205812185361973',
            ReportLocation_Sector9: '1205812185361974',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494'
          };

            return { ...state, formatMapping };
          });

          upsertTask(
            dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1201382240883590', //hardcoded project id

            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                    `${dataValue('body.GrievanceId')(state)} (KoboID:${dataValue('body._id')(state)})`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptionGrievance'),
                custom_fields: {
                    //This tells Asana what fields to update and how to locate them.
                    
                    //The statements below apply to Asana Fields that are for OPEN ENDED
                    //i.e. They accept FREE TEXT INPUT from the Kobo Form
          '1203711959959076': dataValue('body.StaffName'),
          '1201884379104074': dataValue('body.GrievanceId'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1203711932409666': dataValue('body.DateGrievanceEntered'),
          '1205812185585254': dataValue('body.ReporterLocation'),
          '1202329899911605': dataValue('body.ReporterName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1202329899911623': dataValue('body.GrievanceDate'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1203712121887316': dataValue('body.ActionsTaken'),
          '1202329899911635': dataValue('body.OnlineFolder'),
          '1202329899911599': dataValue('body.SubmissionDate'),
                    
                    //The statements below apply to Asana Fields that have multiplechoice / DropDown options
                    //i.e. They require that the user selects specific options from the Kobo Form dropdown list.
                    // These are the questions that require the MAPPING TABLES at the top of this page.
                    //The mapping key-value pairs are obtained using a console.log tht runs in the Fetch GID Job
                   /* '0000000000000000': dataValue('body.WhereGrievance'), */ //Grievance Date field missing in Asana  
          '1202329899911645': state => state.formatMapping["GrievanceOrSuggestion_" + dataValue('body.GrievanceOrSuggestion')(state)], //SubmissionType in Asana = GrievanceOrSuggestion in Kobo
          '1208262949429784': state => state.formatMapping["WcsStaff_" + dataValue('body.WcsStaff')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1205812185361965': state => state.formatMapping["ReportLocation_" + dataValue('body.ReportLocation')(state)],
          '1203977086782815': state => state.formatMapping["Anonymous_" + dataValue('body.Anonymous')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
                },
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          );

      GRM21-Upsert-TZ-Marine-Grievances:
        name: GRM21 Upsert TZ Marine Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
              
            SubmissionType_Grievance: '1202329899911646',
            SubmissionType_Suggestion: '1202329899911647',
            SubmissionType_Request: '1202329899911648',
            SubmissionType_Feedback: '1202329899911649',
            Area_TanzaniaMainland: '1209399297109676',
            Area_ZanzibarIsland: '1209399297109677',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_ProjectMeeting: '1208936305975370',
            ReportFormat_Prospecting: '1208419056473280',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_VoiceCall: '1202330347494027',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceReceiver_VillageChairperson: '1209399297109682',
            GrievanceReceiver_VillageExecutive: '1209399297109683',
            GrievanceReceiver_RespectiveCommitteeTZ: '1209399297109684',
            GrievanceReceiver_WardExecutive: '1209399297109685',
            GrievanceReceiver_RespectiveDistrictDepartment: '1209399297109686',
            GrievanceReceiver_Sheha: '1209399297109687',
            GrievanceReceiver_ShehaMember: '1209399297109688',
            GrievanceReceiver_RespectiveCommitteeZI: '1209399297109689',
            GrievanceReceiver_RespectiveDistrict: '1209399297109690',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.CaseID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptionGrievance'),
                custom_fields: {
                 // Fields  belonging to open-ended questions (qxns that accept free text input)

          '1204411543329531': dataValue('body.DepositDate'),
          '1209399308955031': dataValue('body.StaffName'),
          '1209399308955036': dataValue('body.CaseID'),
          '1209399309046632': dataValue('body.Country'),
          '1209399309046637': dataValue('body.Region'),
          '1209399309046642': dataValue('body.District'),
          '1209399309046627': dataValue('body.Village'),
          '1209399308955046': dataValue('body.DateGrievanceEntered'),
          '1209399308955051': dataValue('body.ReporterFullName'),
          '1209399308955056': dataValue('body.ReporterContactInformation'),
          '1209399308955061': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1209399308989909': dataValue('body.WhenGrievance'),
          '1209399308989914': dataValue('body.PartiesInvolvedGrievance'),
          '1209399308989919': dataValue('body.LocalAuthoritiesContacted'),
          '1209399308989929': dataValue('body.ReliefRequested'),
          '1203712121887316': dataValue('body.ActionsTaken'),
          '1209399308989924': dataValue('body.HarmSuffered'),
          '1209399308989934': dataValue('body.OnlineFolder'),
          '1209399303211161': dataValue('body.today'),// The Today value in Kobo goes into KoboSubmissionDate in Asana

          // Fields  belonging to questions with dropdown or multiple choice

          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1209399297109675': state => state.formatMapping["Area_" + dataValue('body.Area')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1209399297109681': state => state.formatMapping["GrievanceReceiver_" + dataValue('body.GrievanceReceiver')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
              },
            },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM23-Upsert-Mada-NO-Grievances:
        name: GRM23 Upsert Mada NO Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            SubmissionType_Grievance: '1202329899911646', 
            SubmissionType_Suggestion: '1202329899911647', 
            SubmissionType_Request: '1202329899911648', 
            SubmissionType_Feedback: '1202329899911649', 
            WcsStaff_Yes: '1208262949429785',
            WcsStaff_No: '1208262949429786',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_PostalLetter: '1202330347503544',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Hotline: '1202330347501419',
            Anonymous_Yes: '1203977086782816',
            Anonymous_No: '1208270620741491', 
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            ReportLocation_Sector1: '1205812185361966',
            ReportLocation_Sector2: '1205812185361967',
            ReportLocation_Sector3: '1205812185361968',
            ReportLocation_Sector4: '1205812185361969',
            ReportLocation_Sector5: '1205812185361970',
            ReportLocation_Sector6: '1205812185361971',
            ReportLocation_Sector7: '1205812185361972',
            ReportLocation_Sector8: '1205812185361973',
            ReportLocation_Sector9: '1205812185361974',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494'
          };

            return { ...state, formatMapping };
          });
          upsertTask(
            dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1201382240883590', //hardcoded project id

            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                    `${dataValue('body.GrievanceId')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptionGrievance'),
                custom_fields: {
                    //This tells Asana what fields to update and how to locate them.
                    
                    //The statements below apply to Asana Fields that are for OPEN ENDED
                    //i.e. They accept FREE TEXT INPUT from the Kobo Form
          '1203711959959076': dataValue('body.StaffName'), '1201884379104074': dataValue('body.GrievanceId'), '1203712049265363': dataValue('body.StaffEmail'), '1203711932409666': dataValue('body.DateGrievanceEntered'), '1205812185585254': dataValue('body.ReporterLocation'), '1202329899911605': dataValue('body.ReporterName'), '1203712060006636': dataValue('body.ReporterContactInformation'), '1203712112458773': dataValue('body.AuthorityGrievanceReporter'), '1202329899911619': dataValue('body.WhereGrievance'), '1202329899911623': dataValue('body.GrievanceDate'), '1203712125372990': dataValue('body.PartiesInvolvedGrievance'), '1203712145400954': dataValue('body.LocalAuthoritiesContacted'), '1203712150593482': dataValue('body.HarmSuffered'), '1203712149463009': dataValue('body.ReliefRequested'), '1203712121887316': dataValue('body.ActionsTaken'), '1202329899911635': dataValue('body.OnlineFolder'), '1202329899911599': dataValue('body.SubmissionDate'),
                    
                    //The statements below apply to Asana Fields that have multiplechoice / DropDown options
                    //i.e. They require that the user selects specific options from the Kobo Form dropdown list.
                    // These are the questions that require the MAPPING TABLES at the top of this page.
                    //The mapping key-value pairs are obtained using a console.log tht runs in the Fetch GID Job
                   /* '0000000000000000': dataValue('body.WhereGrievance'), */ //Grievance Date field missing in Asana  
          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)], //SubmissionType in Asana = GrievanceOrSuggestion in Kobo '1208262949429784': state => state.formatMapping["WcsStaff_" + dataValue('body.WcsStaff')(state)], '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)], '1205812185361965': state => state.formatMapping["ReportLocation_" + dataValue('body.ReportLocation')(state)], '1203977086782815': state => state.formatMapping["Anonymous_" + dataValue('body.Anonymous')(state)], '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)], '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)], '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)], '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
                },
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          );

      GRM24-Upsert-Mada-SO-Grievances:
        name: GRM24 Upsert Mada SO Grievances
        adaptor: '@openfn/language-asana@2.1.6'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
           WcsStaff_Yes: '1208262949429785',
            WcsStaff_No: '1208262949429786',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_ProjectMeeting: '1208936305975370',
            ReportFormat_Prospecting: '1208419056473280',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportLocation_Sector1: '1210486439085793',
            ReportLocation_Sector2: '1210486439111084',
            ReportLocation_Sector3: '1210486439111085',
            ReportLocation_Sector4: '1210486439111086',
            ReportLocation_Sector5: '1210486439111087',
            ReportLocation_Sector6: '1210486439111088',
            ReportLocation_Sector7: '1210486439111089',
            ReportLocation_Sector8: '1210486439111090',
            ReportLocation_Sector9: '1210486439111091',
            ReportLocation_Masoala: '1210486439111092',
            Anonymous_Yes: '1203977086782816',
            Anonymous_No: '1208270620741491',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',

          };

            return { ...state, formatMapping };
          });

          upsertTask(
            dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1201382240883590', //hardcoded project id

            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                    `${dataValue('body.GrievanceId')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptionGrievance'),
                custom_fields: {
                    //This tells Asana what fields to update and how to locate them.
                    
                    //The statements below apply to Asana Fields that are for OPEN ENDED
                    //i.e. They accept FREE TEXT INPUT from the Kobo Form
          '1203712049265363': dataValue('body.StaffEmail'),
          '1201884379104074': dataValue('body.GrievanceId'),
          '1203711932409666': dataValue('body.DateGrievanceEntered'),
          '1210486439111108': dataValue('body.ReporterLocation'),
          '1202329899911605': dataValue('body.ReporterName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1202329899911623': dataValue('body.GrievanceDate'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1203712121887316': dataValue('body.ActionsTaken'),
          '1202329899911635': dataValue('body.OnlineFolder'),
          '1202329899911599': dataValue('body.SubmissionDate'),
                    
                    //The statements below apply to Asana Fields that have multiplechoice / DropDown options
                    //i.e. They require that the user selects specific options from the Kobo Form dropdown list.
                    // These are the questions that require the MAPPING TABLES at the top of this page.
                    //The mapping key-value pairs are obtained using a console.log tht runs in the Fetch GID Job
                   /* '0000000000000000': dataValue('body.WhereGrievance'), */ //Grievance Date field missing in Asana  
          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1208262949429784': state => state.formatMapping["WcsStaff_" + dataValue('body.WcsStaff')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1210486439085792': state => state.formatMapping["ReportLocation_" + dataValue('body.ReportLocation')(state)],
          '1203977086782815': state => state.formatMapping["Anonymous_" + dataValue('body.Anonymous')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
          '1207470695842882': state => state.formatMapping["Donor_" + dataValue('body.Donor')(state)],
          '1208023920549836': state => state.formatMapping["Type de grief_" + dataValue('body.Type de grief')(state)],
          '1210486439111114': state => state.formatMapping["GrievanceYear_" + dataValue('body.GrievanceYear')(state)],
          '1139718444554297': state => state.formatMapping["Priority_" + dataValue('body.Priority')(state)],
                },
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          );

      GRM25-Upsert-Mada-Interne:
        name: GRM25 Upsert Mada Interne
        adaptor: '@openfn/language-asana@2.1.6'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
           WcsStaff_Yes: '1208262949429785',
            WcsStaff_No: '1208262949429786',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_ProjectMeeting: '1208936305975370',
            ReportFormat_Prospecting: '1208419056473280',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_TextMessage: '1202330347498273',
            ReportLocation_Sector1: '1210513334764351',
            ReportLocation_Sector2: '1210513334764352',
            ReportLocation_Sector3: '1210513334764353',
            ReportLocation_Sector4: '1210513334764354',
            ReportLocation_Sector5: '1210513334764355',
            ReportLocation_Sector6: '1210513334764356',
            ReportLocation_Sector7: '1210513334764357',
            ReportLocation_Sector8: '1210513334764358',
            ReportLocation_Sector9: '1210513334764359',
            ReportLocation_Masoala: '1210513334764360',
            Anonymous_Yes: '1203977086782816',
            Anonymous_No: '1208270620741491',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',

          };

            return { ...state, formatMapping };
          });

          upsertTask(
            dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1201382240883590', //hardcoded project id

            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                    `${dataValue('body.GrievanceId')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptionGrievance'),
                custom_fields: {
                    //This tells Asana what fields to update and how to locate them.
                    
                    //The statements below apply to Asana Fields that are for OPEN ENDED
                    //i.e. They accept FREE TEXT INPUT from the Kobo Form
          '1203711959959076': dataValue('body.StaffName'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1201884379104074': dataValue('body.GrievanceId'),
          '1203711932409666': dataValue('body.DateGrievanceEntered'),
          '1210513334764376': dataValue('body.ReporterLocation'),
          '1202329899911605': dataValue('body.ReporterName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1202329899911623': dataValue('body.GrievanceDate'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1203712121887316': dataValue('body.ActionsTaken'),
          '1202329899911635': dataValue('body.OnlineFolder'),
          '1202329899911599': dataValue('body.SubmissionDate'),
                    
                    //The statements below apply to Asana Fields that have multiplechoice / DropDown options
                    //i.e. They require that the user selects specific options from the Kobo Form dropdown list.
                    // These are the questions that require the MAPPING TABLES at the top of this page.
                    //The mapping key-value pairs are obtained using a console.log tht runs in the Fetch GID Job
                   /* '0000000000000000': dataValue('body.WhereGrievance'), */ //Grievance Date field missing in Asana  
          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1208262949429784': state => state.formatMapping["WcsStaff_" + dataValue('body.WcsStaff')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1210513334764350': state => state.formatMapping["ReportLocation_" + dataValue('body.ReportLocation')(state)],
          '1203977086782815': state => state.formatMapping["Anonymous_" + dataValue('body.Anonymous')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
                },
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          );

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Triage-jobs:
        source_trigger: webhook
        target_job: Triage-jobs
        condition_type: always
        enabled: true
      Triage-jobs->GRM05-Upsert-Blue-Future-Grievances:
        source_job: Triage-jobs
        target_job: GRM05-Upsert-Blue-Future-Grievances
        condition_type: js_expression
        condition_label: New Blue Future GRM
        condition_expression: |
          state.data.formName == "Formulário de Sugestões e Reclamações Públicas"

        enabled: true
      Triage-jobs->GRM07-Upsert-Ruaha-Katavi-Grievances:
        source_job: Triage-jobs
        target_job: GRM07-Upsert-Ruaha-Katavi-Grievances
        condition_type: js_expression
        condition_label: New Ruaha Katavi Form
        condition_expression: |
          state.data.formName == "GRM WCS Ruaha Katavi Kobo Form"

        enabled: true
      Triage-jobs->GRM08-Upsert-NiassaGrievances:
        source_job: Triage-jobs
        target_job: GRM08-Upsert-NiassaGrievances
        condition_type: js_expression
        condition_label: New Niassa Form
        condition_expression: |
          state.data.formName == "Formulário de ocorrências da Reserva Especial do Niassa"

        enabled: true
      Triage-jobs->GRM12-Upsert-Mamabay-Grievances:
        source_job: Triage-jobs
        target_job: GRM12-Upsert-Mamabay-Grievances
        condition_type: js_expression
        condition_label: New Mamabay Form
        condition_expression: |
          state.data.formName == "Mamabay Grievance Intake Form"

        enabled: true
      Triage-jobs->GRM21-Upsert-TZ-Marine-Grievances:
        source_job: Triage-jobs
        target_job: GRM21-Upsert-TZ-Marine-Grievances
        condition_type: js_expression
        condition_label: New TZ Marine form
        condition_expression: |
          state.data.formName == "GRM_Marine program"

        enabled: true
      Triage-jobs->GRM23-Upsert-Mada-NO-Grievances:
        source_job: Triage-jobs
        target_job: GRM23-Upsert-Mada-NO-Grievances
        condition_type: js_expression
        condition_label: New Mada NO Form
        condition_expression: |
          state.data.formName == "GRM Nord Ouest Madagascar"

        enabled: true
      Triage-jobs->GRM24-Upsert-Mada-SO-Grievances:
        source_job: Triage-jobs
        target_job: GRM24-Upsert-Mada-SO-Grievances
        condition_type: js_expression
        condition_label: New Mada SO Form
        condition_expression: |
          state.data.formName == "GRM Sud Ouest Madagascar"

        enabled: true
      Triage-jobs->GRM25-Upsert-Mada-Interne:
        source_job: Triage-jobs
        target_job: GRM25-Upsert-Mada-Interne
        condition_type: js_expression
        condition_label: New Mada Interne Form
        condition_expression: |
          state.data.formName == "GRM Interne Madagascar"

        enabled: true
  Global-Sync-to-Asana:
    name: Global Sync to Asana
    jobs:
      Triage-jobs:
        name: Triage jobs
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide

      GRM00-Upsert-TEST-Grievances:
        name: GRM00 Upsert TEST Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
           
            SubmissionType_Grievance: '1208823831241793',
            SubmissionType_Suggestion: '1208823831314328',
            'SubmissionType_Test case': '1208823831314329',
            SubmissionType_Question: '1208823831314330',
            Classification_Boundary: '1207934444664901',
            Classification_Comment: '1207064126306000',
            'Classification_Human Resources': '1206208252500541',
            'Classification_HWC (Human-Wildlife Conflict)': '1204269608862904',
            'Classification_Illegal Activity': '1204269617420858',
            'Classification_Management ': '1204269617420857',
            'Classification_PI & NR (Project Implementation & Natural Resource Management)': '1204269608862903',
            'Classification_Positive Feedback': '1204269617420859',
            Classification_Question: '1207064126305999',
            'Classification_Request for assistance': '1204269617420968',
            'Classification_Safeguards & Human Rights': '1204269608862902',
            Classification_Suggestion: '1207064073157821',
            Classification_Other: '1204269617420860',
            'Classification_Not eligible': '1207724727681221',
            Country_Bolivia: '1208823831314340',
            Country_Brazil: '1208823831314341',
            Country_Colombia: '1208823831314342',
            Country_Ecuador: '1208823831314343',
            Country_Peru: '1208823831314344',
            Country_Indeterminado: '1208823831314345',
            Donor_AFD: '1207470695842883',
            Donor_BAF: '1207470914898964',
            Donor_BEF: '1207470928895774',
            Donor_EU: '1207470928895775',
            Donor_GEF: '1207470928895776',
            Donor_Hempel: '1207942941061344',
            Donor_INL: '1207470928895777',
            Donor_KFW: '1207942941061345',
            Donor_LLF: '1207470928895778',
            Donor_NOAA: '1207470928895779',
            Donor_MACP: '1207470928895780',
            'Donor_REDD+': '1207470928895781',
            Donor_USAID: '1207470928895782',
            'Donor_World Bank': '1207551210258645',
            WcsStaff_Yes: '1208823831341595',
            WcsStaff_No: '1208823831341596',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_Prospecting: '1208419056473280',
            Anonymous_Yes: '1203977086782816',
            Anonymous_No: '1208270620741491',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            'Gender_mixed_gender': '1202330737362429',
            'Gender_unknown_gender': '1202330737362430',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            IndigenousPeople_mixed_group: '1207724962870243',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494'
          };

            return { ...state, formatMapping };
          });

          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.GrievanceID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptioGrievance'),
                custom_fields: {
                          // Fields  belonging to open-ended questions (qxns that accept free text input)
          '1203711959959076': dataValue('body.StaffName'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1208823831241787': dataValue('body.Submission Date'),
          '1203712064304976': dataValue('body.ReporterFullName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1201884379104074': dataValue('body.GrievanceId'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1208823831341587': dataValue('body.WhenGrievance'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1208823831341575': dataValue('body.DescriptioGrievance'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1208823831241782': dataValue('body.OneDrive Folder'),
          '1203830309880883': dataValue('body.WhatProject'),
          '1208823831341580': dataValue('body.Suggestion'),

          // Fields  belonging to questions with dropdown or multiple choice
          '1187328718760774': state => state.formatMapping["GrievanceStatus _" + dataValue('body.GrievanceStatus ')(state)],
          '1208823831241792': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202593715272940': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
          '1204269608862901': state => state.formatMapping["Classification_" + dataValue('body.Classification')(state)],
          '1208823831314339': state => state.formatMapping["Country_" + dataValue('body.Country')(state)],
          '1207470695842882': state => state.formatMapping["Donor_" + dataValue('body.Donor')(state)],
          '1208823831341594': state => state.formatMapping["WcsStaff_" + dataValue('body.WcsStaff')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1203977086782815': state => state.formatMapping["Anonymous_" + dataValue('body.Anonymous')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
           }
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM01-Upsert-WCS-Global-Grievances-in-Asana:
        name: GRM01 Upsert WCS Global Grievances in Asana
        adaptor: '@openfn/language-asana@2.1.6'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide

      TEST-Asana-Update:
        name: TEST Asana Update
        adaptor: '@openfn/language-asana@4.1.1'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            'Grade_Grade 0': '1203958686294707',
            'Grade_Grade 1': '1203958686294708',
            'Grade_Grade 2': '1203958686294709',
            'Grade_Grade 3': '1203958686294710',
            'Grade_Grade 4': '1203958686294711',
            'Grade_Grade 5': '1203958686294712',
            SubmissionType_Grievance: '1203958690339474',
            SubmissionType_Suggestion: '1203958690339475',
            SubmissionType_Request: '1203958690339476',
            SubmissionType_Feedback: '1203958690339477',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_PostalLetter: '1202330347503544',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Hotline: '1202330347501419',
            SubmissionContext_individual: '1202330732062943',
            SubmissionContext_group: '1202330732067344',
            SubmissionContext_passive_observation: '1202330732068565',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            DatePrecision_Yes: '1202330815421248',
            DatePrecision_No: '1202330815421249',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494'
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.GrievanceID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.DescriptioGrievance'),
                custom_fields: {
                 // Fields  belonging to open-ended questions (qxns that accept free text input)
                // '1203958690339485': dataValue('body.StaffName'),
                // '1203958690339489': dataValue('body.CaseID'),
                // '1203958690339493': dataValue('body.StaffEmail'),
                // '1203958690339497': dataValue('body.today'), // The Today value in Kobo goes into Submission Date in Asana
                // '1203958690356245': dataValue('body.ReporterName'),
                // '1203958690356249': dataValue('body.ReporterContactInformation'),
                // '1203958690356256': dataValue('body.AuthorityGrievanceReporter'),
                // '1203958690356261': dataValue('body.WhereGrievance'),
                // '1203958690356266': dataValue('body.GrievanceDate'),
                // '1203958690356270': dataValue('body.PartiesInvolvedGrievance'),
                // '1203958690356274': dataValue('body.LocalAuthoritiesContacted'),
                // '1203958690374468': dataValue('body.HarmSuffered'),
                // '1203958690374472': dataValue('body.ReliefRequested'),
                // '1203958690374476': dataValue('body.OnlineFolder'),
                // '1203958690374480': dataValue('body.Location'),
                // '1205016004799740': dataValue('body.SuggestionBoxId'),
                // '1204411543329531': dataValue('body.SubmissionDate'), // The Submission Date in Kobo goes to the Deposit Date in Asana
                // '1204398351814004': dataValue('body.BoxCollectionDate'),
                // '1204398351814002': dataValue('body.SuggestionBoxGps'),

                // // Fields  belonging to questions with dropdown or multiple choice
                // '1203958686294706': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
                // '1203958690339473': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
                // '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
                // '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
                // '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
                // '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
                // '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
                // '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
                // '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
                // '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
              },
            },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Triage-jobs:
        source_trigger: webhook
        target_job: Triage-jobs
        condition_type: always
        enabled: true
      Triage-jobs->GRM00-Upsert-TEST-Grievances:
        source_job: Triage-jobs
        target_job: GRM00-Upsert-TEST-Grievances
        condition_type: js_expression
        condition_label: New TEST form
        condition_expression: |
          state.data.formName == "Test WCS FGRM Form"
        enabled: false
      Triage-jobs->GRM01-Upsert-WCS-Global-Grievances-in-Asana:
        source_job: Triage-jobs
        target_job: GRM01-Upsert-WCS-Global-Grievances-in-Asana
        condition_type: js_expression
        condition_label: New WCS Global GRM form
        condition_expression: |
          state.data.formName == "WCS Global Grievances & Suggestions"
        enabled: false
      Triage-jobs->TEST-Asana-Update:
        source_job: Triage-jobs
        target_job: TEST-Asana-Update
        condition_type: js_expression
        condition_label: TEST WCS FORM
        condition_expression: |
          state.data.formName == "Test WCS FGRM Form"
        enabled: true
  Greater-Mekong-Sync-to-Asana:
    name: Greater Mekong Sync to Asana
    jobs:
      Triage-jobs:
        name: Triage jobs
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide

      GRM11-Upsert-KSWS-Grievances-in-Asana:
        name: GRM11 Upsert KSWS Grievances in Asana
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
           GrievanceReport_CallProjectStaff: '1205638979644643',
            GrievanceReport_Email: '1205638979644644',
            GrievanceReport_HotlineCall: '1205638979644645',
            GrievanceReport_InPerson: '1205638979644646',
            GrievanceReport_PostalLetter: '1205638979644647',
            GrievanceReport_TelegramMessage: '1205638979644648',
            GrievanceReport_SuggestionBox: '1208201385471326',
            GrievanceType_Comment: '1205638979644651',
            GrievanceType_GeneralGrievance: '1205638979644652',
            GrievanceType_ProjectGrievance: '1205638979644653',
            GrievanceType_Suggestion: '1206939331510951',
            GrievanceType_Request: '1206939331510952',
            GrievanceType_ReportIllegalActivities: '1208201385471325',
            CaseType_Boundary: '1205638979644656',
            CaseType_CashForCommunities: '1205638979644657',
            CaseType_CommunityPatrols: '1205638979644658',
            CaseType_Governance: '1205638979644659',
            CaseType_HumanWildlifeConflict: '1205638979644660',
            CaseType_IllegalLogging: '1205638982100772',
            CaseType_LandClearance: '1205638982100773',
            CaseType_LandGrabbing: '1205638982100774',
            CaseType_LawEnforcement: '1205638982100775',
            CaseType_LeMemberThreat: '1205638982100776',
            CaseType_LogsTransportation: '1205638982100777',
            CaseType_NestProtection: '1205638982100778',
            CaseType_PermissionLetterLogging: '1205638982100779',
            CaseType_Poaching: '1205638982100780',
            CaseType_ProjectImplementation: '1205638982100781',
            CaseType_SignBoard: '1205638982100782',
            CaseType_Threats: '1205638982100783',
            CaseType_VillageFocalPerson: '1205638982100784',
            CaseType_WcsStaffFraud: '1205638982100785',
            ReponseNeeded_Yes: '1205638982100788',
            ReponseNeeded_No: '1205638982100789',
            ReponseNeeded_NotSure: '1205638982100790',
            'GrievanceStatus _BeingReviewed': '1192850232576003',
            'GrievanceStatus _NotAssigned': '1187328718760775',
            'GrievanceStatus _Dismissed': '1187674280676653',
            'GrievanceStatus _OnHold': '1187328718760778',
            'GrievanceStatus _BeingInvestigated': '1187328718760776',
            'GrievanceStatus _Resolved': '1187328718760777',
            'GrievanceStatus _RemediationBeingMonitored': '1192772373678248' 
            };

            return { ...state, formatMapping };
          });

          upsertTask(
            dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1201382240883590', //hardcoded project id

            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                    `${dataValue('body.GrievanceId')(state)} (KoboID:${dataValue('body._id')(state)})`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: state =>
          `Complaint in Khmer: ${dataValue('body.ComplaintKhmer')(state)}.
          Complaint English: ${dataValue('body.ComplaintEnglish')(state)}.`,
                custom_fields: {
                    //This tells Asana what fields to update and how to locate them.
                    
                    //The statements below apply to Asana Fields that are for OPEN ENDED
                    //i.e. They accept FREE TEXT INPUT from the Kobo Form
          '1202329899911605': dataValue('body.ReporterName'),
          '1201884379104074': dataValue('body.GrievanceId'),
          '1205638664513483': dataValue('body.GrievanceDate'),
          '1205638669631280': dataValue('body.GrievanceTime'),
          '1202329899911619': dataValue('body.Village'),
          '1205638664513479': dataValue('body.NamePhone'),
          '1205638664513487': dataValue('body.Position'),
          '1205638664544001': dataValue('body.DateTimeLocationIncident'),
          '1205638664544009': dataValue('body.ActionTaken'),
          '1205638664555699': dataValue('body.ResponseGiven'),
          '1205638664544013': dataValue('body.ResultAction'),
          '1205638664544017': dataValue('body.Evidence'),
          '1205639008044145': dataValue('body.StatusExplanation'),
          '1205638664555695': dataValue('body.DateResolved'),
          '1205638664555691': dataValue('body.LTM reviewed'),
                    
                    //The statements below apply to Asana Fields that have multiplechoice / DropDown options
                    //i.e. They require that the user selects specific options from the Kobo Form dropdown list.
                    // These are the questions that require the MAPPING TABLES at the top of this page.
                    //The mapping key-value pairs are obtained using a console.log tht runs in the Fetch GID Job
                   /* '0000000000000000': dataValue('body.WhereGrievance'), */ //Grievance Date field missing in Asana
          '1205638979644642': state => state.formatMapping["GrievanceReport_" + dataValue('body.GrievanceReport')(state)],
          '1205638979644650': state => state.formatMapping["GrievanceType_" + dataValue('body.GrievanceType')(state)],
          '1205638979644655': state => state.formatMapping["CaseType_" + dataValue('body.CaseType')(state)],
          '1205638982100787': state => state.formatMapping["ReponseNeeded_" + dataValue('body.ReponseNeeded')(state)],
          '1187328718760774': state => state.formatMapping["GrievanceStatus _" + dataValue('body.GrievanceStatus ')(state)],
                },
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          );

      GRM19-Upsert-NPL-Grievances-in-Asana:
        name: GRM19 Upsert NPL Grievances in Asana
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
                      const formatMapping = {
                      ReportFormat_Email: '1202330347502485',
                      ReportFormat_FocalPoint: '1207724960884497',
                      ReportFormat_Hotline: '1202330347501419',
                      ReportFormat_InPerson: '1202330347493011',
                      ReportFormat_Letter: '1202330347503544',
                      ReportFormat_OnlineForm: '1207934414764297',
                      ReportFormat_Other: '1203830536105154',
                      ReportFormat_ProjectMeeting: '1208936305975370',
                      ReportFormat_Prospecting: '1208419056473280',
                      ReportFormat_SuggestionBox: '1202330347499327',
                      ReportFormat_TextMessage: '1202330347498273',
                      ReportFormat_VoiceCall: '1202330347494027',
                      SubmissionType_Grievance: '1202329899911646',
                      SubmissionType_Suggestion: '1202329899911647',
                      SubmissionType_Request: '1202329899911648',
                      SubmissionType_Feedback: '1202329899911649',
                      TypeOfGrievance_ReportIllegalAtivities: '1208936168537764',
                      TypeOfGrievance_ProjectGrievance: '1208936168537765',
                      CaseType_Boundary: '1205638979644656',
                      CaseType_CashForCommunities: '1205638979644657',
                      CaseType_CommunityPatrols: '1205638979644658',
                      CaseType_Governance: '1205638979644659',
                      CaseType_HumanWildlifeConflict: '1205638979644660',
                      CaseType_IllegalLogging: '1205638982100772',
                      CaseType_LandClearance: '1205638982100773',
                      CaseType_LandGrabbing: '1205638982100774',
                      CaseType_LawEnforcement: '1205638982100775',
                      CaseType_LeMemberThreat: '1205638982100776',
                      CaseType_LogsTransportation: '1205638982100777',
                      CaseType_NestProtection: '1205638982100778',
                      CaseType_PermissionLetterLogging: '1205638982100779',
                      CaseType_Poaching: '1205638982100780',
                      CaseType_ProjectImplementation: '1205638982100781',
                      CaseType_SignBoard: '1205638982100782',
                      CaseType_Threats: '1205638982100783',
                      CaseType_VillageFocalPerson: '1205638982100784',
                      CaseType_WcsStaffFraud: '1205638982100785',
                      ResponseNeeded_Yes: '1205638982100788',
                      ResponseNeeded_No: '1205638982100789',
                      ResponseNeeded_NotSure: '1205638982100790'
                      };

                      return { ...state, formatMapping };
                    });

                    upsertTask(
                      dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
                      //'1201382240883590', //hardcoded project id

                      {
                        externalId: "name", // Asana external Id field name (e.g., 'gid')
                        data: {
                          name: state =>
                            //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                              `${dataValue('body.CaseID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                          projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                          //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                          notes: state =>
                    `Complaint in Khmer: ${dataValue('body.ComplaintKhmer')(state)}.
                    Complaint English: ${dataValue('body.ComplaintEnglish')(state)}.`,
                          custom_fields: {
                              //This tells Asana what fields to update and how to locate them.
                              
                              //The statements below apply to Asana Fields that are for OPEN ENDED
                              //i.e. They accept FREE TEXT INPUT from the Kobo Form
                    '1202329899911595': dataValue('body.CaseID'),
                    '1202329899911599': dataValue('body.SubmissionDate'),
                    '1208936137293167': dataValue('body.SubmissionTime'),
                    '1208908109568167': dataValue('body.Location'),
                    '1203712060006636': dataValue('body.ReporterContactInformation'),
                    '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
                    '1202329899911623': dataValue('body.GrievanceDate'),
                    '1202329899911619': dataValue('body.WhereGrievance'),
                    '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
                    '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
                    '1203712150593482': dataValue('body.HarmSuffered'),
                    '1203712149463009': dataValue('body.ReliefRequested'),
                    '1202329899911635': dataValue('body.OnlineFolder'),
                    '1205638664544009': dataValue('body.ActionTaken'),
                    '1205638664555699': dataValue('body.ResponseGiven'),
                    '1205638664544013': dataValue('body.ResultAction'),
                    '1205638664544017': dataValue('body.Evidence'),
                              
                              //The statements below apply to Asana Fields that have multiplechoice / DropDown options
                              //i.e. They require that the user selects specific options from the Kobo Form dropdown list.
                              // These are the questions that require the MAPPING TABLES at the top of this page.
                              //The mapping key-value pairs are obtained using a console.log tht runs in the Fetch GID Job

                    '1202593715272940': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
                    '1204269608862901': state => state.formatMapping["Classification_" + dataValue('body.Classification')(state)],
                    '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
                    '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
                    '1208936168537763': state => state.formatMapping["TypeOfGrievance_" + dataValue('body.TypeOfGrievance')(state)],
                    '1205638979644655': state => state.formatMapping["CaseType_" + dataValue('body.CaseType')(state)],
                    '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
                    '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
                    '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
                    '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
                    '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
                    '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
                    '1205638982100787': state => state.formatMapping["ResponseNeeded_" + dataValue('body.ResponseNeeded')(state)],
                          },
                        },
                      },
                      state => {
                        console.log(JSON.stringify(state.data, null, 2)); //log data
                        return state;
                      }
                    );
    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Triage-jobs:
        source_trigger: webhook
        target_job: Triage-jobs
        condition_type: always
        enabled: true
      Triage-jobs->GRM11-Upsert-KSWS-Grievances-in-Asana:
        source_job: Triage-jobs
        target_job: GRM11-Upsert-KSWS-Grievances-in-Asana
        condition_type: js_expression
        condition_label: New Keo Seima Form
        condition_expression: |
          state.data.formName == "Keo Seima GRM"
        enabled: true
      Triage-jobs->GRM19-Upsert-NPL-Grievances-in-Asana:
        source_job: Triage-jobs
        target_job: GRM19-Upsert-NPL-Grievances-in-Asana
        condition_type: js_expression
        condition_label: New NPL form
        condition_expression: |
          state.data.formName == "Feedback and Grievance Redress Mechanism - NPL"
        enabled: true
  MesoAmerica-Sync-to-Asana:
    name: MesoAmerica Sync to Asana
    jobs:
      GRM15-Upsert-Belize-Grievances-in-Asana:
        name: GRM15 Upsert Belize Grievances in Asana
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
           SubmissionType_Grievance: '1202329899911646',
            SubmissionType_Suggestion: '1202329899911647',
            SubmissionType_Request: '1202329899911648',
            SubmissionType_Feedback: '1202329899911649',
            WcsStaff_Yes: '1208262949429785',
            WcsStaff_No: '1208262949429786',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            Anonymous_Anonymous: '1203977086782816',
            Gender_Male: '1202330737362427',
            Gender_Female: '1202330737362428',
            'Gender_Mixed gender (group)': '1202330737362429',
            'Gender_Unknown gender': '1202330737362430',
            'Gender_Other gender': '1207852335266397',
            'Gender_Prefer not to report': '1207852335266398',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            IndigenousPeople_mixed_group: '1207724962870243',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494'
          };

            return { ...state, formatMapping };
          });

          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.GrievanceID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'),
                custom_fields: {
                          // Fields  belonging to open-ended questions (qxns that accept free text input)
                '1203711959959076': dataValue('body.StaffName'),
                '1203712049265363': dataValue('body.StaffEmail'),
                '1208262949075450': dataValue('body.DateGrievanceReceived'),
                '1203712064304976': dataValue('body.ReporterFullName'),
                '1203712060006636': dataValue('body.ReporterContactInformation'),
                '1201884379104074': dataValue('body.GrievanceID'),
                '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
                '1202329899911619': dataValue('body.WhereGrievance'),
                '1208262949429777': dataValue('body.WhenGrievance'),
                '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
                '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
                '1208262949429765': dataValue('body.Description'),
                '1203712150593482': dataValue('body.HarmSuffered'),
                '1203712149463009': dataValue('body.ReliefRequested'),
                '1208262949075445': dataValue('body.OneDriveFolder'),
                '1203830309880883': dataValue('body.WhatProject'),
                '1208262949429770': dataValue('body.Suggestion'),

          // Fields  belonging to questions with dropdown or multiple choice
                '1187328718760774': state => state.formatMapping["GrievanceStatus _" + dataValue('body.GrievanceStatus ')(state)],
                '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],      '1202593715272940': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
                '1204269608862901': state => state.formatMapping["Classification_" + dataValue('body.Classification')(state)],
                '1208262949429784': state => state.formatMapping["WcsStaff_" + dataValue('body.WcsStaff')(state)],
                '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
                '1203977086782815': state => state.formatMapping["Anonymous_" + dataValue('body.Anonymous')(state)],
                '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
                '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
                '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
                '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
                '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
           }
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->GRM15-Upsert-Belize-Grievances-in-Asana:
        source_trigger: webhook
        target_job: GRM15-Upsert-Belize-Grievances-in-Asana
        condition_type: js_expression
        condition_label: 15. New Belize Form
        condition_expression: |
          state.data.formName == "Belize Grievance Form"
        enabled: true
  Patagonia-Sync-to-Asana:
    name: Patagonia Sync to Asana
    jobs:
      GRM14-Upsert-Argentina-Grievances-in-Asana:
        name: GRM14 Upsert Argentina Grievances in Asana
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
               SubmissionType_Grievance: '1202329899911646',
               SubmissionType_Suggestion: '1202329899911647',
               SubmissionType_Request: '1202329899911648',
               SubmissionType_Feedback: '1202329899911649',
               ReportFormat_InPerson: '1202330347493011',
               ReportFormat_VoiceCall: '1202330347494027',
               ReportFormat_TextMessage: '1202330347498273',
               ReportFormat_Email: '1202330347502485',
               ReportFormat_Letter: '1202330347503544',
               ReportFormat_Other: '1203830536105154',
               ReportFormat_SuggestionBox: '1202330347499327',
               ReportFormat_Hotline: '1202330347501419',
               ReportFormat_FocalPoint: '1207724960884497',
               SubmissionContext_individual: '1202330732062943',
               SubmissionContext_group: '1202330732067344',
               SubmissionContext_passive_observation: '1202330732068565',
               Gender_Male: '1202330737362427',
               Gender_Female: '1202330737362428',
               Gender_MixedGender: '1202330737362429',
               Gender_UnknownGender: '1202330737362430',
               Gender_OtherGender: '1207852335266397',
               Gender_UnknownGender: '1207852335266398',
               IndigenousPeople_Yes_ips: '1202330755980982',
               IndigenousPeople_No_ips: '1202330755984093',
               IndigenousPeople_unknown_ips: '1202330755985164',
               IndigenousPeople_mixed_group: '1207724962870243',
              'Age_<18': '1202330714895607',
              'Age_19-35': '1202330714895608',
              'Age_36-50': '1202330714895609',
              'Age_>50': '1202330714895610',
               Age_mixed_age: '1202330714895611',
               Age_unknown_age: '1202330714895612',
               GrievanceAgainst_Wcs: '1202330466059593',
               GrievanceAgainst_GovernmentPartner: '1202330466059594',
               GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
               GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
               GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
               DatePrecision_Yes: '1202330815421248',
               DatePrecision_No: '1202330815421249',
               ConfidentialitySensitivity_Yes: '1202330821410493',
               ConfidentialitySensitivity_No: '1202330821410494'
          };

            return { ...state, formatMapping };
          });

          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.CaseID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'),
                custom_fields: {
                          // Fields  belonging to open-ended questions (qxns that accept free text input)
                '1202329899911595': dataValue('body.CaseID'),
                '1203711959959076': dataValue('body.StaffName'),
                '1203712049265363': dataValue('body.StaffEmail'),
                '1202329899911599': dataValue('body.SubmissionDate'),
                '1207853044688980': dataValue('body.DepositDate'),
                '1207853044688986': dataValue('body.SuggestionBoxGps'),
                '1207853044688992': dataValue('body.SuggestionBoxId'),
                '1207853044726596': dataValue('body.BoxCollectionDate'),
                '1202329899911605': dataValue('body.ReporterName'),
                '1203712060006636': dataValue('body.ReporterContactInformation'),
                '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
                '1202329899911619': dataValue('body.WhereGrievance'),
                '1202329899911623': dataValue('body.GrievanceDate'),
                '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
                '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
                '1203712150593482': dataValue('body.HarmSuffered'),
                '1203712149463009': dataValue('body.ReliefRequested'),
                '1202329899911635': dataValue('body.OnlineFolder'),
                '1207853044764227': dataValue('body.Location'),

          // Fields  belonging to questions with dropdown or multiple choice
                '1201123975239655': state => state.formatMapping["Funding/Grants_" + dataValue('body.Funding/Grants')(state)],
                '1202593715272940': state => state.formatMapping["Grade_" + dataValue('body.Grade')(state)],
                '1204269608862901': state => state.formatMapping["Classification_" + dataValue('body.Classification')(state)],
                '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
                '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
                '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
                '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
                '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
                '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
                '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
                '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
                '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
           }
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->GRM14-Upsert-Argentina-Grievances-in-Asana:
        source_trigger: webhook
        target_job: GRM14-Upsert-Argentina-Grievances-in-Asana
        condition_type: js_expression
        condition_label: 14. New Argentina GRM form
        condition_expression: |
          state.data.formName == "Mecanismo de atención de Quejas, Reclamos y Sugerencias"
        enabled: true
  SAP-1.-Sync-to-Asana:
    name: SAP 1. Sync to Asana
    jobs:
      Triage-jobs:
        name: Triage jobs
        adaptor: '@openfn/language-common@2.5.0'
        credential: null
        body: |
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide

      GRM02-a-Upsert-Aceh-Grievances-in-Asana:
        name: GRM02 a Upsert Aceh Grievances in Asana
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          // Your job goes here.

          fn(state => {
            //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
              RelatedProjects: '1187634487549316',
              LandTerritory: '1187634487549317',
              WildlifeConflict: '1187634487549318',
              OtherIssues: '1201884389902967',
              Suggestion: '1201884389905045',
              InPerson: '1192836094355011',
              VoiceCall: '1192836094355012',
              TextMessage: '1192847692374160',
              Email: '1192847692376214',
              PostalLetter: '1192847692376223',
              Yes: '1201884189073507',
              No: '1201884189073508',
              BeingReviewed: '1192850232576003',
              NotAssigned: '1187328718760775',
              Dismissed: '1187674280676653',
              OnHold: '1187328718760778',
              BeingInvestigated: '1187328718760776',
              Resolved: '1187328718760774',
              RemediationBeingMonitored: '1192772373678248',
              InResolution: '1208167139436055',
              TransferredToHumanResources: '1206081287831891',
              NotExisting: '1207502226530961',
              Existing: '1207502226530960',
              PAP: '1207001974192804',
              'CSOS/NGO': '1207001974192805',
              Government: '1207001974192806',
              LocalCommunities: '1207001974192807',
              OtherCategory: '1207001974192808',
              WCS: '1207122053764074',
              DKP: '1207122053764075',
              'BKSDA/National Park': '1207122053764076',
              Others: '1207122053764077',
              New: '1207116211136433',
              Continued: '1207116218726092',
              0: '1202593715272941',
              1: '1202593715272942',
              2: '1202593715272943',
              3: '1202593715272944',
              4: '1202593715272945',
              5: '1202593715272946'

            };
            const koboFormData = state.data.body;
            return { ...state, formatMapping, koboFormData };
          });

          upsertTask(
            dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1201382240883590', //hardcoded project id

            {
              externalId: 'name', // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.GrievanceId')(state)} (KoboID:${dataValue(
                    'body._id'
                  )(state)})`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: state => ``,
                
                custom_fields: {

                  //This tells Asana what fields to update and how to locate them.

                  //The statements below apply to Asana Fields that are for OPEN ENDED
                  //i.e. They accept FREE TEXT INPUT from the Kobo Form
                  // '1206280786508633': dataValue('body.PicGrievanceReceiver'), // TODO @ Aissa
                  1201884379104074: dataValue('body.GrievanceId'), //Mapped to Grievance ID in Asana
                  1201872034756835: dataValue('body.GrievanceDate'), //Mapped to Grievance Date in Asana
                  1202329899911619: dataValue('body.GrievanceLocation'), //Mapped to Grievance Location in Asana
                  1201872034752530: dataValue('body.NameComplainant'), //Mapped to Name of Complainant in Asana
                  1201884189073488: dataValue('body.AddressComplainant'), //Mapped to Address of Complainant in Asana
                  1201884189073490: dataValue('body.TelephoneComplainant'), //Mapped to TelephoneComplainant in Asana
                  
                  1201884189073518: dataValue('body.Topic'), //Mapped to Topic in Asana
                  1201884189073504: dataValue('body.GrievanceDescription'), //Mapped to Grievance Description in Asana
                  

                  1201884189073512: dataValue('body.FollowUpDate'), //Mapped to Follow Up Date in Asana
                  1201884189073516: dataValue('body.GrievanceResolution'), //Mapped to Grievance Resolution in Asana
                  1201884189073514: dataValue('body.DateGrievanceResolution'), //Mapped to Date Grievance Resolution in Asana (**Check Asana)
                  1207001974192810: dataValue('body.NameRecorder'),
                  1207001974192812: dataValue('body.OrganizationRecorder'),
                  1207116218726094: dataValue('body.Translation'),
                  1207122053764071: dataValue('body.Program'),

                  
            
                  //The statements below apply to Asana Fields that have multiplechoice / DropDown options
                  //i.e. They require that the user selects specific options from the Kobo Form dropdown list.
                  // These are the questions that require the MAPPING TABLES at the top of this page.
                  //The mapping key-value pairs are obtained using a console.log tht runs in the Fetch GID Job
                  /* '0000000000000000': dataValue('body.WhereGrievance'), */ //Grievance Date field missing in Asana
                  1187634487549315: state =>

                    state.formatMapping[dataValue('body.GrievanceType')(state)],
                  1192836094355010: state =>
                    state.formatMapping[dataValue('body.GrievanceReportFormat')(state)], //Mapped to Grievance Report Format in Asana (**Check Asana)
                  1201884189073506: state =>
                    state.formatMapping[dataValue('body.NeedFollowUp')(state)],
                  1187328718760774: state =>
                    state.formatMapping[dataValue('body.GrievanceStatus')(state)],

                  1207502226530959: state => state.formatMapping[dataValue('body.GrievanceEvidence')(state)], //Mapped to Grievance Evidence in Asana
                  1207001974192803: state => state.formatMapping[dataValue('body.CategoryComplainant')(state)],
                  1207122053764073: state => state.formatMapping[dataValue('body.StakeholdersResponsible')(state)],
                  1207116211136432: state => state.formatMapping[dataValue('body.NewOrContinued')(state)],
                  1202593715272940: state => state.formatMapping[dataValue('body.Grade')(state)],
                  
                  
                  // '1201884189073492': dataValue('body.NoFormPreviousComplaint'),// TODO @ Aissa //Mapped to No Form Previous Complaint in Asana

                  // '1201884189073494': dataValue('body.ProjectName'),  // TODO @ Aissa //Mapped to ProjectName in Asana
                  // '1201884189073510': dataValue('body.FollowUpOtherStakeholders'), // TODO @ Aissa //Mapped to Follow Up Other Stakeholders in Asana
                },
              },
            },
            state => {
              console.log('final state:: ', state); //log data
              return state;
            }
          );

      GRM02-b-Sync-to-GoogleSheets-Aceh:
        name: GRM02 b Sync to GoogleSheets Aceh
        adaptor: '@openfn/language-googlesheets@3.0.14'
        credential: ddetoeuf@wcs.org-Diane-GoogleSheet
        body: |
          fn((state) => {
            const formatGlobals = {
              InPerson: "Verbal/Langsung",
              PhoneCall: "Telepon",
              Email: "Email",
              PostalLetter: "Surat",
              SuggestionBox: "Kotak Saran",
              TextMessage: "Pesan Teks",
              DirectSubmission: "Pengiriman Langsung",
            };

            const categoryGlobals = {
              PAP: "PAP",
              "CSOS/NGO": "CSO/LSM",
              Government: "Lembaga Pemerintah",
              LocalCommunities: "Masyarakat Lokal (bukan PAP)",
              OtherCategory: "Lainnya",
            };

            const stakeHolderGlobals = {
              WCS: "WCS",
              DKP: "DKP",
              "BKSDA/National Park": "BKSDA/Taman Nasional",
              Others: "Lainnya",
            };
            
            const evidenceGlobals = {
             Existing: "Ada",
             NotExisting: "Tidak Ada"
              
            }

            const { koboFormData, data } = state;
            state.taskId = data.data.gid;
            
            state.gsheetValues = [
              [
                state.taskId, //Asana Task ID
                koboFormData.GrievanceId, //Grievance ID
                koboFormData.GrievanceDate, //Tgl Keluhan,
                koboFormData.GrievanceLocation, //Lokasi Keluhan
                koboFormData.NameComplainant, //Nama Pemberi Keluhan
                koboFormData.AddressComplainant, //Alamat Pemberi Keluhan
                koboFormData.TelephoneComplainant, //Telp Pemberi Keluhan
                formatGlobals[koboFormData.GrievanceReportFormat], //Cara Menerima Keluhan [mtuchi]
                koboFormData.NameRecorder, //Nama penerima keluhan/ perekam
                koboFormData.OrganizationRecorder, //Organisasi penerima keluhan/perekam
                koboFormData.GrievanceDescription, //Deskripsi Keluhan (dari sudut pandang si pengeluh)
                categoryGlobals[koboFormData.CategoryComplainant], //Kategori Pemberi Keluhan [mtuchi]
                koboFormData.Topic, //Topik / Tema Keluhan
                stakeHolderGlobals[koboFormData.StakeholdersResponsible], //Stakeholder yang Bertanggung Jawab Terhadap Keluhan [mtuhi]
                evidenceGlobals[koboFormData.GrievanceEvidence], //Bukti Pendukung Keluhan

              ],
            ];

            return state;
          });

          getValues(
            "14xOFZ-iUgOizvtyDul52LhwWqFq8MUTmy2xLMEU3SRw",
            "Form dan Log Case Keluhan!A:AD",
            (state) => {
              const {
                taskId,
                data: { values },
              } = state;

              const rowIndex = values.findIndex((row) => row["0"] === taskId);

              if (rowIndex !== -1) {
                state.updateRange = `Form dan Log Case Keluhan!A${rowIndex + 1}:AD${
                  rowIndex + 1
                }`;
              }

              return state;
            }
          );

          fn((state) => {
            if (state.updateRange) {
              console.log("Updating row", state.updateRange);
              return batchUpdateValues({
                spreadsheetId: "14xOFZ-iUgOizvtyDul52LhwWqFq8MUTmy2xLMEU3SRw",
                range: state.updateRange,
                values: state.gsheetValues,
              })(state);
            }

            console.log("Adding new row");
            return appendValues({
              spreadsheetId: "14xOFZ-iUgOizvtyDul52LhwWqFq8MUTmy2xLMEU3SRw",
              range: "Form dan Log Case Keluhan!A2:AD2",
              values: state.gsheetValues,
            })(state);
          });

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Triage-jobs:
        source_trigger: webhook
        target_job: Triage-jobs
        condition_type: always
        enabled: true
      Triage-jobs->GRM02-a-Upsert-Aceh-Grievances-in-Asana:
        source_job: Triage-jobs
        target_job: GRM02-a-Upsert-Aceh-Grievances-in-Asana
        condition_type: js_expression
        condition_label: New Indonesia Form
        condition_expression: |
          state.data.formName == "Aceh Grievance Form - TEST"
        enabled: true
      GRM02-a-Upsert-Aceh-Grievances-in-Asana->GRM02-b-Sync-to-GoogleSheets-Aceh:
        source_job: GRM02-a-Upsert-Aceh-Grievances-in-Asana
        target_job: GRM02-b-Sync-to-GoogleSheets-Aceh
        condition_type: on_job_success
        enabled: true
  SAP-2.-Update-Asana-Task-Aceh:
    name: SAP 2. Update Asana Task Aceh
    jobs:
      GRM02-c-Update-Asana-Task-Aceh:
        name: GRM02 c Update Asana Task Aceh
        adaptor: '@openfn/language-asana@v3.2.0'
        credential: null
        body: |
          fn(state => {
            state.grievanceReportFormatMap = {
              'Verbal/Langsung': '1192836094355011', //InPerson
              Telepon: '1192836094355012', // PhoneCall
              Email: '1192847692376214', //Email
              Sarut: '1192847692376223', //PostalLetter
              'Kotak Saran': '1207122874564877', //SuggestionBox
              'Pesan Teks': '1192847692374160', //TextMessage
              'Pengiriman Langsung': '1207001942658468', //DirectSubmission
            };

            state.newOrContinuedMap = {
              Baru: '1207116211136433', //New
              Lanjutan: '1207116218726092', // Continued
            };

            state.stakeholderMap = {
              WCS: '1207122053764074',
              DKP: '1207122053764075',
              'BKSDA/Taman Nasional': '1207122053764076',
              Lainnya: '1207122053764077'
            };

            state.evidenceMap = {
              Ada: "1207502226530960",
              "Tidak Ada": "1207502226530961"
            }

            state.gradeMap = {
              0: '1202593715272941',
              1: '1202593715272942',
              2: '1202593715272943',
              3: '1202593715272944',
              4: '1202593715272945',
              5: '1202593715272946',
            };

            state.statusMap = {
              BeingReviewed: '1192850232576003',
              NotAssigned: '1187328718760775',
              Dismissed: '1187674280676653',
              OnHold: '1187328718760778',
              BeingInvestigated: '1187328718760776',
              // Resolved: '1187328718760774',
              Resolved: '1187328718760777',
              RemediationBeingMonitored: '1192772373678248',
              InResolution: '1208167139436055',
              'Transferred to Human Resources': '1206081287831891'
            };

            state.categoryComplainantMap = {
              PAP: '1207001974192804', //PAP
              'CSO/LSM': '1207001974192805', //CSOS/NGO
              'Lembaga Pemerintah': '1207001974192806', //Government,
              'Masyarakat Lokal (bukan PAP)': '1207001974192807', //LocalCommunities
              Lainnya: '1207001974192808', //OtherCategory
            };
            
            state.followupMap = {
              'Ya WCS': '1201884189073507', 
              'Ya Non-WCS': '1201884189073508', 
              Tidak: '1207122053764079'
            };

            return state;
          });

          fn(state => {
            const { headers } = state.data;
            const taskIds = Object.keys(state.data).filter(
              i =>
                i !== 'headers' &&
                i !== '' &&
                i !== '__query_params' &&
                /^[0-9]+$/.test(i) // returns only numeric ids
            );
            
            console.log(taskIds);

            state.data = taskIds
              .map(taskId => {
                const mappedObject = headers.reduce((obj, key, index) => {
                  obj[key] = state.data[taskId].values[index];
                  return obj;
                }, {});
                return { id: taskId, task: mappedObject };
              })
              .flat();
            console.log(state.data);

            return state;
          });

          fn(state => {
            const {
              categoryComplainantMap,
              grievanceReportFormatMap,
              statusMap,
              newOrContinuedMap,
              gradeMap,
              stakeholderMap,
              evidenceMap,
              followupMap
            } = state;
            state.tasks = state.data.map(({ id, task }) => {
              console.log(id + " " , task['Tgl Tindak Lanjut Keluhan oleh tim ']);
              console.log(task['Grade']);
              console.log(gradeMap[task['Grade']]);
              console.log(task['Perlu/Tidak Tindak Lanjut (Ya WCS / Ya Non WCS / Tidak)']);
              console.log(followupMap[task['Perlu/Tidak Tindak Lanjut (Ya WCS / Ya Non WCS / Tidak)']]);
              
              return {
                id,
                task: {
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,

                  custom_fields: {
                    //This tells Asana what fields to update and how to locate them.
                    //The statements below apply to Asana Fields that are for OPEN ENDED
                    //i.e. They accept FREE TEXT INPUT from the Kobo Form

                    1207001974192803:
                      categoryComplainantMap[task['Kategori Pemberi Keluhan']], //Mapped to CategoryComplainant in Asana

                    1201884189073518: task['Topik / Tema Keluhan'], //Mapped to Topic in Asana
                    1207122053764073:
                      stakeholderMap[task['Stakeholder yang Bertanggung Jawab Terhadap Keluhan']], //Mapped to Stakeholders Responsible in Asana
                    1207502226530959: evidenceMap[task['Bukti Pendukung Keluhan']], //Mapped to Grievance Evidence in Asana
                    1207116211136432:
                      newOrContinuedMap[task['Keluhan baru atau lanjutan']],
                    1201884189073512: task['Tgl Tindak Lanjut Keluhan oleh tim '],

                    1201884189073496: task['Nama Proyek/Donor'],
                    1207116218726094: task['Terjemahan atau penjelasan tambahan'],
                    1202593715272940: gradeMap[task['Grade']],
                    1201884189073506: followupMap[task['Perlu/Tidak Tindak Lanjut (Ya WCS / Ya Non WCS / Tidak)']],
                    // 1201884189073506: task['Perlu/Tidak Tindak Lanjut  (WCS)'],
                    1201884189073516: task['Penyelesaian Keluhan'],
                    1201884189073514: task['Tgl Pemberian Tanggapan keluhan'],
                    1187328718760774: statusMap[task['Status Keluhan']],
                    1207122053764071: task['Program'],
                  },
                },
              };
            });

            if (state.tasks === 0) {
              console.log('no new data to sync to Asana');
            }

            state.allResults = [];
            return state;
          });

          each(
            '$.tasks[*]',
            updateTask(
              state => state.data.id,
              state => state.data.task,
              state => {
                state.allResults.push(state.data);
                return state;
              }
            )
          );

          fn(state => {
            const ids = state.allResults.map(res => res.gid);
            if (state.allResults.length > 0) {
              console.log(
                `${state.allResults.length} number of tasks to be updated with the following Asana task ids`
              );
              console.log(JSON.stringify(ids, null, 2));
            }
            return state;
          });

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->GRM02-c-Update-Asana-Task-Aceh:
        source_trigger: webhook
        target_job: GRM02-c-Update-Asana-Task-Aceh
        condition_type: js_expression
        condition_label: Changes from GoogleSheet
        condition_expression: |
          state.data.notificationType == "gsheet-changes"
        enabled: true
  Sudano-Sahel-Sync-to-Asana:
    name: Sudano Sahel Sync to Asana
    jobs:
      Triage-jobs:
        name: Triage jobs
        adaptor: '@openfn/language-common@2.5.0'
        credential: null
        body: |
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide

      GRM18-Upsert-CAR-Grievances-in-Asana:
        name: GRM18 Upsert CAR Grievances in Asana
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            SubmissionType_Grievance: '1202329899911646',
            SubmissionType_Suggestion: '1202329899911647',
            SubmissionType_Request: '1202329899911648',
            SubmissionType_Feedback: '1202329899911649',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_Prospecting: '1208419056473280',
            SubmissionContext_individual: '1202330732062943',
            SubmissionContext_group: '1202330732067344',
            SubmissionContext_passive_observation: '1202330732068565',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            IndigenousPeople_mixed_group: '1207724962870243',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            DatePrecision_Yes: '1202330815421248',
            DatePrecision_No: '1202330815421249',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.CaseID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'),
                custom_fields: {
                  // Fields  belonging to open-ended questions (qxns that accept free text input)

          '1202329899911599': dataValue('body.today'), // The Kobo value "today" is used to fill the "Submission Date" in Asana
          '1204411543329531': dataValue('body.SubmissionDate'), // the kobo value "SubmissionDate" is used to fill the "Deposit date" in Asana
          '1202329899911595': dataValue('body.CaseID'),
          '1203711959959076': dataValue('body.StaffName'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1208391214272950': dataValue('body.SuggestionBoxId'),
          '1204398351814002': dataValue('body.SuggestionBoxGps'),
          '1204398351814004': dataValue('body.BoxCollectionDate'),
          '1202329899911605': dataValue('body.ReporterName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1208391214272934': dataValue('body.Precision sur le lieu'),
          '1202329899911623': dataValue('body.GrievanceDate'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1202329899911635': dataValue('body.OnlineFolder'),
                  
                  // Fields  belonging to questions with dropdown or multiple choice
          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
          '1207470695842882': state => state.formatMapping["Donor_" + dataValue('body.Donor')(state)],
                },
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

      GRM22-Upsert-Sena-Oura-Grievances:
        name: GRM22 Upsert Sena Oura Grievances
        adaptor: '@openfn/language-asana@2.0.0'
        credential: aleksa@openfn.org-Asana-API-Token---AK-WCS-Grievances
        body: |
          fn(state => {   //Mapping table to map Kobo field CHOICES to Asana custom_fields_choices gids
            const formatMapping = {
            SubmissionType_Grievance: '1202329899911646',
            SubmissionType_Suggestion: '1202329899911647',
            SubmissionType_Request: '1202329899911648',
            SubmissionType_Feedback: '1202329899911649',
            ReportFormat_InPerson: '1202330347493011',
            ReportFormat_FocalPoint: '1207724960884497',
            ReportFormat_VoiceCall: '1202330347494027',
            ReportFormat_Hotline: '1202330347501419',
            ReportFormat_TextMessage: '1202330347498273',
            ReportFormat_SuggestionBox: '1202330347499327',
            ReportFormat_Email: '1202330347502485',
            ReportFormat_Letter: '1202330347503544',
            ReportFormat_OnlineForm: '1207934414764297',
            ReportFormat_Other: '1203830536105154',
            ReportFormat_Prospecting: '1208419056473280',
            SubmissionContext_individual: '1202330732062943',
            SubmissionContext_group: '1202330732067344',
            SubmissionContext_passive_observation: '1202330732068565',
            Gender_male: '1202330737362427',
            Gender_female: '1202330737362428',
            Gender_mixed_gender: '1202330737362429',
            Gender_unknown_gender: '1202330737362430',
            IndigenousPeople_Yes_ips: '1202330755980982',
            IndigenousPeople_No_ips: '1202330755984093',
            IndigenousPeople_unknown_ips: '1202330755985164',
            IndigenousPeople_mixed_group: '1207724962870243',
            'Age_<18': '1202330714895607',
            'Age_19-35': '1202330714895608',
            'Age_36-50': '1202330714895609',
            'Age_>50': '1202330714895610',
            Age_mixed_age: '1202330714895611',
            Age_unknown_age: '1202330714895612',
            TranshumantHerders_Yes: '1210234880733066',
            TranshumantHerders_No: '1210234880733067',
            GrievanceAgainst_Wcs: '1202330466059593',
            GrievanceAgainst_GovernmentPartner: '1202330466059594',
            GrievanceAgainst_PrivateSectorPartner: '1202330466059595',
            GrievanceAgainst_CivilSocietyPartner: '1202330466059596',
            GrievanceAgainst_NotWcsAndNotAWcsPartner: '1202330466059597',
            DatePrecision_Yes: '1202330815421248',
            DatePrecision_No: '1202330815421249',
            ConfidentialitySensitivity_Yes: '1202330821410493',
            ConfidentialitySensitivity_No: '1202330821410494',
            };

            return { ...state, formatMapping };
          });


          // console.log("projectid:");
          // console.log(dataValue('projectid')(state));
          fn(state =>
          upsertTask(
              dataValue('projectid'), //to dynamically map project id, assuming it's defined in the Get job. This projectID must be originally added to the Job that fetches data from Kobo.
            //'1202329899911590', //hardcoded project id
            
            {
              externalId: "name", // Asana external Id field name (e.g., 'gid')
              data: {
                name: state =>
                  //`Grievance ID: ${dataValue('body.GrievanceID')(state)} (KoboID:${dataValue('body._id')(state)})`,
                  `${dataValue('body.CaseID')(state)}`,
                projects: state => [`${dataValue('projectid')(state)}`], //to dynamically map project id, assuming it's defined in the Get job
                //projects: ['1201382240883590'], //hardcoded Asana project id for Template Project
                notes: dataValue('body.Description'),
                custom_fields: {
                  // Fields  belonging to open-ended questions (qxns that accept free text input)

          '1202329899911595': dataValue('body.CaseID'),
          '1203711959959076': dataValue('body.StaffName'),
          '1203712049265363': dataValue('body.StaffEmail'),
          '1202329899911599': dataValue('body.today'), // The Kobo value "today" is used to fill the "Submission Date" in Asana
          '1204411543329531': dataValue('body.DepositDate'),
          '1209801117509185': dataValue('body.SuggestionBoxId'),
          '1204398351814002': dataValue('body.SuggestionBoxGps'),
          '1204398351814004': dataValue('body.BoxCollectionDate'),
          '1202329899911605': dataValue('body.ReporterName'),
          '1203712060006636': dataValue('body.ReporterContactInformation'),
          '1203712112458773': dataValue('body.AuthorityGrievanceReporter'),
          '1202329899911619': dataValue('body.WhereGrievance'),
          '1202329899911623': dataValue('body.GrievanceDate'),
          '1203712125372990': dataValue('body.PartiesInvolvedGrievance'),
          '1203712145400954': dataValue('body.LocalAuthoritiesContacted'),
          '1203712150593482': dataValue('body.HarmSuffered'),
          '1203712149463009': dataValue('body.ReliefRequested'),
          '1202329899911635': dataValue('body.OnlineFolder'),
                  
                  // Fields  belonging to questions with dropdown or multiple choice
          '1202329899911645': state => state.formatMapping["SubmissionType_" + dataValue('body.SubmissionType')(state)],
          '1202330347491974': state => state.formatMapping["ReportFormat_" + dataValue('body.ReportFormat')(state)],
          '1202330732061901': state => state.formatMapping["SubmissionContext_" + dataValue('body.SubmissionContext')(state)],
          '1202330737362426': state => state.formatMapping["Gender_" + dataValue('body.Gender')(state)],
          '1202330755979944': state => state.formatMapping["IndigenousPeople_" + dataValue('body.IndigenousPeople')(state)],
          '1210234880733065': state => state.formatMapping["TranshumantHerders_" + dataValue('body.TranshumantHerders')(state)],
          '1202330714895606': state => state.formatMapping["Age_" + dataValue('body.Age')(state)],
          '1202330466059592': state => state.formatMapping["GrievanceAgainst_" + dataValue('body.GrievanceAgainst')(state)],
          '1202330815421247': state => state.formatMapping["DatePrecision_" + dataValue('body.DatePrecision')(state)],
          '1202330821410492': state => state.formatMapping["ConfidentialitySensitivity_" + dataValue('body.ConfidentialitySensitivity')(state)],
                },
              },
            },
            state => {
              console.log(JSON.stringify(state.data, null, 2)); //log data
              return state;
            }
          )(state)
          .catch(e => {
            console.log('Asana says', JSON.stringify(e.response.data, null, 2));
            throw e;
          })
          )

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Triage-jobs:
        source_trigger: webhook
        target_job: Triage-jobs
        condition_type: always
        enabled: true
      Triage-jobs->GRM18-Upsert-CAR-Grievances-in-Asana:
        source_job: Triage-jobs
        target_job: GRM18-Upsert-CAR-Grievances-in-Asana
        condition_type: js_expression
        condition_label: New CAR form
        condition_expression: |
          state.data.formName == "GRM CAR"
        enabled: true
      Triage-jobs->GRM22-Upsert-Sena-Oura-Grievances:
        source_job: Triage-jobs
        target_job: GRM22-Upsert-Sena-Oura-Grievances
        condition_type: js_expression
        condition_label: New Sera Oura Form
        condition_expression: |
          state.data.formName == "GRM Sena Oura"
        enabled: true
  Sync-GRM-Submission-Metadata:
    name: Sync GRM Submission Metadata
    jobs:
      Get-GRM-Forms-List:
        name: Get GRM Forms List
        adaptor: '@openfn/language-googlesheets@3.0.14'
        credential: ddetoeuf@wcs.org-Diane-GoogleSheet
        body: |
          //== Job to be used for getting a list of "deployed" Kobo forms from sheets to auto-sync  ==//
          // This can be run on-demand at any time by clicking "run" or modify manualCursor below //
          getValues(
            '1s7K3kxzm5AlpwiALattyc7D9_aIyqWmo2ubcQIUlqlY',
            'grm-DEPLOYED!A:AA', //get Deployed forms list from Sheet
            
            state => {
              const [headers, ...values] = state.data.values;

              const mapHeaderToValue = value => {
                return headers.reduce((obj, header) => {
                  obj[header] = value[headers.indexOf(header)];
                  return obj;
                }, {});
              };

              state.sheetsData = values
                .filter(
                  item =>
                    item.includes('TRUE') //return forms where auto-sync = TRUE
                    
                )
                .map(item => mapHeaderToValue(item));

              return state;
            }
          );

          fn(state => {
            const { sheetsData } = state;

            // Set a manual cursor if you'd like to only fetch data after this date...
            //e.g., '2023-01-01T23:51:45.491+01:00'
            const manualCursor = '';  //lastUsed: 2024-04-01T00:00:00.000Z
            console.log('manualCursor defined?', manualCursor);
            
            //...otherwise the job will use this dynamicCursor
            const dynamicCursor = getTodayISODate(); 

            function getTodayISODate() {
              const today = new Date();
              today.setUTCHours(0, 0, 0, 0); // Set hours, minutes, seconds, and milliseconds to 0
              return today.toISOString(); // Convert to ISO string
            }
            
            const cursorValue = manualCursor || dynamicCursor; 
            console.log('Cursor value to use in query:', cursorValue);
            
             

            const formsList = sheetsData.map(survey => ({
                formId: survey.uid,
                owner: survey.owner,
                name: survey.name 
            })); 
            
            console.log('# of deployed forms detected in Sheet:: ', formsList.length);
            console.log('List of forms to auto-sync:: ', JSON.stringify(formsList, null, 2)); 

            state.data = {
              surveys: sheetsData.map(survey => ({
                formId: survey.uid,
                //tag: survey.tag,
                name: survey.name,
                owner: survey.owner,
                projectId: survey.asana_projectid,
                url1: `https://kf.kobotoolbox.org/api/v2/assets/${survey.uid}/counts`,
                url2: `https://kf.kobotoolbox.org/api/v2/assets/${survey.uid}/data`
                // query: `&query={"end":{"$gte":"${cursorValue}"}}`,
              })),
            };
            console.log(state.data);
            return state;
          });

      Get-Submission-Metadata:
        name: Get Submission Metadata
        adaptor: '@openfn/language-http@3.1.11'
        credential: aleksa@openfn.org-WCS-GRM-Kobo-Account
        body: |
          // Initialize an empty array to accumulate survey data
          fn(state => ({ ...state, surveysList: [] })),

          // Process each survey
          each(dataPath('surveys[*]'), state => {
            const { url1, url2, formId, name, owner, projectId } = state.data;

            return fn(async state => {
              const response1 = await get(`${url1}`, {})(state);
              const response2 = await get(`${url2}`, {})(state);

              const resultList = response2.data.results;
              // const lastSubmissionTime = resultList[resultList.length - 1]._submission_time;
              let lastSubmissionTime;
              if (resultList.length > 0) {
                lastSubmissionTime = resultList[resultList.length - 1]._submission_time;
              } else {
                lastSubmissionTime = null;
              }
              
              let total_submission_count;
              if (response1.data && 'total_submission_count' in response1.data) {
                total_submission_count = response1.data.total_submission_count;
              } else {
                total_submission_count = undefined;
              }
              
              console.log(`Processing: ${formId}`);
              console.log(url1);
              console.log(url2);
              console.log(`Last submission time: ${lastSubmissionTime}`);

              const surveyData = {
                formId,
                name,
                // total_submission_count: response1.data.total_submission_count,
                owner,
                total_submission_count,
                lastSubmissionTime,
                projectId
              };

              // Add the current survey data to the accumulator
              return { 
                ...state, 
                surveysList: [...state.surveysList, surveyData]
              };
            })(state);
          }),

          // After processing all surveys, update the state with the accumulated data
          fn(state => {
            const finalState = {
              ...state,
              data: {
                ...state.data,
                surveys: state.surveysList
              }
            };
            console.log("Final combined state:", JSON.stringify(finalState.data, null, 2));
            return finalState;
          })

      Upsert-to-DB:
        name: Upsert to DB
        adaptor: '@openfn/language-mssql@2.6.11'
        credential: rediet@openfn.org-WCS-Programs-Database-central-db
        body: |
          fn((state) => {
           
            const surveys = state.data.surveys.map((survey) => ({
              DatasetName: survey.name,
              DatasetOwner: survey.owner,
              DatasetUuidID: survey.formId,
              LastSubmissionTime: survey.lastSubmissionTime,
              KoboSubmissionCount: survey.total_submission_count,
              LastCheckedTime: new Date().toISOString(),
              LastUpdateTime: new Date().toISOString(),
              KoboManaged: true,
              Citation: survey.projectId
            }));

            console.log("Surveys to be upserted: ", surveys);
           
            return { ...state, surveys };
          });



          upsertMany("WCSPROGRAMS_KoboData", "DatasetUuidID", (state) => state.surveys, {
            logQuery: true,
          });

    triggers:
      cron:
        type: cron
        cron_expression: '0 */3 * * *'
        enabled: false
    edges:
      cron->Get-GRM-Forms-List:
        source_trigger: cron
        target_job: Get-GRM-Forms-List
        condition_type: always
        enabled: true
      Get-GRM-Forms-List->Get-Submission-Metadata:
        source_job: Get-GRM-Forms-List
        target_job: Get-Submission-Metadata
        condition_type: on_job_success
        enabled: true
      Get-Submission-Metadata->Upsert-to-DB:
        source_job: Get-Submission-Metadata
        target_job: Upsert-to-DB
        condition_type: on_job_success
        enabled: true
  "[ARCHIVE]-Fetch-Historical-Kobo-Grievance-Data":
    name: '[ARCHIVE] Fetch Historical Kobo Grievance Data'
    jobs:
      ARCHIVE-Fetch-Historical-Kobo-Grievance-Data:
        name: ARCHIVE Fetch Historical Kobo Grievance Data
        adaptor: '@openfn/language-http@v3.1.12'
        credential: null
        body: |
          fn(state => { //test comment
            // OpenFn will not sync Kobo records that are older than 1 week to avoid overwriting data in Asana
            const isMoreThanAWeekOld = dateString => {
              const currentDate = new Date();
              const inputDate = new Date(dateString);
              // Calculate the difference in time (in milliseconds) and convert to days
              const daysDifference = (currentDate - inputDate) / (1000 * 60 * 60 * 24);

              return daysDifference > 7;
            };
            // IF YOU CLEAR STATE...
            // Set this manual cursor to the earliest submission date you want fetch.

            const manualCursor = '2024-07-16T06:01:18.729Z';

            state.cursor = state.lastEnd || manualCursor;

            if (!state.cursor)
              throw new Error(
                'Please define a cursor date no greater than 1 week ago and try again'
              );
            if (isMoreThanAWeekOld(state.cursor))
              throw new Error(
                `cursor ${state.cursor} is older than 1 week. OpenFn will not sync Kobo records that are older than 1 week to avoid overwriting data in Asana.`
              );

            console.log('Current cursor value:', state.cursor);

            state.data = {
              surveys: [
              //==== GRIEVANCES FORM : Add new GRM forms below  ===============//
              // The GRM IDs are the one from the GRM tracking sheet: https://docs.google.com/spreadsheets/d/1Th_fMU0wlw70OL3gzuUwWNu1LXNt1smq/edit#gid=1881042567 //
           
            { // GRM ID. 18 - All projects in that country - CAR
                uid: 'aPpWSiN5k9MufmqQzAaaRY',
                formName: 'GRM CAR',
                projectid: '1208390966993328' // GRM CAR
            },
               
            { // GRM ID. 17 - Yankari Game Reserve - Nigeria
                uid: 'awRoJB7vafgNXneSuNZ93g',
                formName: 'YGR GRM', 
                projectid: '1208202492914969' // GRM_YGR 
            },

            { // GRM ID. 16 - Afi (Cross River) - Nigeria
                uid: 'a4rZX9WRjNGj9YFyr4iHMV',
                formName: 'Afi GRM', 
                projectid: '1208202492914972' // GRM_Afi 
            },
              
            { // GRM ID. 15 - All projects in that country - Belize
                uid: 'aiM2aRxRECUaPTvKDA8bmJ',
                formName: 'Belize Grievance Form', 
                formOwner: 'grm_belize',
                projectid: '1208261458085162' // GRM Belize 
            },
             
              { // GRM ID. 14 - Argentina (country wide)
                uid: 'aAUX6MxCFmAxvcmqdwyFxV',
                formName: 'Mecanismo de atención de Quejas, Reclamos y Sugerencias', 
                projectid: '1207852376378365' // GRM Argentina
              },
              
              { // GRM ID. 13 - Mbe Mountains - Nigeria
                uid: 'aCQPTgBE8jgb4mKbvkLqJj',
                formName: 'Mbe Mountains GRM', 
                projectid: '1204985880563960' // GRM_Mbe
              },
                 
              { // GRM ID. 12 - Mamabay - Madagascar
                uid: 'aBoTAXpkcvgB7VnuGkjdrg',
                formName: 'Mamabay Grievance Intake Form', 
                projectid: '1205812185361950' // GRM Mamabay
              },
             
              { // GRM ID. 11 - Keo Seima - Cambodia
                uid: 'aKXjStgj9doSpyMhsVwkE7',
                formName: 'Keo Seima GRM', 
                projectid: '1205638979644635' // Keo Seima GRM
              },
               
              { // GRM ID. 10 - Ndoki - Congo
                uid: 'aBWBZDn32h7y4UY8FABb6t',
                formName: 'NNNP_Feedback_Form',
                projectid: '1204985880563965' // GRM Ndoki
              },
                 
              { // GRM ID. 9 - Mbam-Djerem - Cameroon
                uid: 'aGcXidoMfazBrksRV7LSkk',
                formName: 'GRM PNMD 2023', 
                projectid: '1204909106761526' // GRM Mbam Djerem
              },
              
              { // GRM ID. 8 - Niassa - Mozambique
                uid: 'aHYNoZsRMpJZnWeotomtce',
                formName: 'Formulário de ocorrências da Reserva Especial do Niassa', 
                projectid: '1204346679777510' // GRM Niassa
              },
               
              { // GRM ID. 7 - Ruaha Katavi - Tanzania
                uid: 'aeMMvn4Pi4m8M7FakifgK8',
                formName: 'GRM WCS Ruaha Katavi Kobo Form', 
                projectid: '1204127406220940' // GRM Ruaha Katavi
              },
               
              { // GRM ID. 6 - Kahuzi Biega - DRC
                uid: 'aDao3y4jjzJJuSGxvXVgAJ',
                formName: 'KBNP Feedback Form',
                projectid: '1203957987731383' // GRM_KBNP
               },
              
              { // GRM ID. 5 - Blue Future - Mozambique
                uid: 'aEcSCYhXLfehtVDumdaRRh',
                formName: 'Formulário de Sugestões e Reclamações Públicas', 
                projectid: '1203703258740979' // Blue Future Grievances & Suggestions
              },
              
              // Form archived - AAO only using the External one
              //{ // GRM ID. 4b AAO Internal - Peru, Colombia, Ecuador, Brazil
              //  uid: 'aGDHHz7hMZVwAbAjwnFSth',
              //  formName: 'AAO Interno Grievance_Form_20220831', 
              //  projectid: '1203829521790035' // AAO Internal PQR
              //},
               
              { // GRM ID. 4a - AAO External - Peru, Colombia, Ecuador, Brazil
                uid: 'a6FdhcebAqFZpdRej4f5FP',
                formName: 'Mecanismo de Atención de Peticiones, Quejas y Reclamos', 
                projectid: '1203150475209897' // AAO External PQR
              },
              
              { // GRM ID. 3 - Okapi - DRC
                uid: 'akknuhDAMSW88M6eBYkr6Y',
                formName: 'OWR feedback form', 
                projectid: '1202329899911590' // GRM_OWR
              },
           
              { // GRM ID. 2 - All - Indonesia
                uid: 'a2SXkrerDvs2ZnwjaVKTYg',
                formName: 'Aceh Grievance Form - TEST', 
                projectid: '1201871867457230' // Aceh GRM - TEST FOR OpenFn
              },

              { // GRM ID. 1 - Global
                uid: 'aEQjRDMcEgLzRDQYcFqSCC',
                formName: 'WCS Global Grievances & Suggestions', 
                projectid: '1201382240883590' //
              },

               //==== OTHER FORMS ===============//
              // {
              //   uid: 'kobo-id',
              //   formName: 'Form Name', //Kobo form name
              //   projectid: 'asana-id-from-url' //Asana project ID
              // },
              //================================//

              ].map(survey => ({
                ...survey,
                formId: survey.uid,
                url: `https://kf.kobotoolbox.org/api/v2/assets/${survey.uid}/data/?format=json`,
                query: `&query={"_submission_time":{"$gte":"${state.cursor}"}}`,
              })),
            };

            state.emptySubmissions = {};
            return state;
          });

          each(dataPath('surveys[*]'), state => {
            const { url, query, tag, formId, formType, formName, owner, projectid } =
              state.data;
            return get(`${url}${query}`, {}, state => {
              state.data.submissions = state.data.results.map(submission => {
                //console.log('Submissions ');
                return {
                  // Here we append the tags defined above to the Kobo form submission data
                  projectid,
                  formName,
                  formOwner: owner,
                  formType,
                  body: submission,
                };
              });
              const count = state.data.submissions.length;

              console.log(`Fetched ${count} submissions from ${formName}.`);
              //Once we fetch the data, we want to post each individual Kobo survey
              //back to the OpenFn inbox to run through the jobs =========================
              return each(dataPath('submissions[*]'), state => {
                console.log(`Posting 1 of ${count}...`);
                console.log(`Submission with uuid ${state.data.body._id}`);
                if (!state.data) {
                  if (!state.emptySubmissions[formId]) {
                    state.emptySubmissions[formId] = [state.data];
                  }
                  state.emptySubmissions[formId].push(state.data);
                }
                return post(state.configuration.openfnInboxUrl, {
                  body: state => state.data,
                })(state);
              })(state);
              // =========================================================================
            })(state);
          });

          fn(state => {
            let lastEnd = state.references
              .filter(item => item.body)
              .map(s => s.body.start)
              .sort((a, b) => new Date(b.date) - new Date(a.date))[0];

            lastEnd = new Date(lastEnd) > new Date() ? lastEnd : new Date().toISOString();

            console.log('New cursor value:', lastEnd);
            return { ...state, data: {}, references: [], lastEnd };
          });

          // Throw an error for empty submissions
          fn(state => {
            const forms = Object.keys(state.emptySubmissions);
            const formSubmission = id => state.emptySubmissions[id];

            if (!forms.length > 0) return state;

            forms.forEach(id => {
              console.warn(
                `OpenFn sent ${
                  formSubmission(id).length
                } empty message to the inbox for ${id}`
              );
            });

            throw new Error(
              'Please troubleshoot why this happened. No data will be sent to Asana for these records.'
            );
          });

    triggers:
      cron:
        type: cron
        cron_expression: '0 */1 * * *'
        enabled: false
    edges:
      cron->ARCHIVE-Fetch-Historical-Kobo-Grievance-Data:
        source_trigger: cron
        target_job: ARCHIVE-Fetch-Historical-Kobo-Grievance-Data
        condition_type: always
        enabled: true
